# Mastra

> Mastra is an open-source TypeScript agent framework designed to provide the essential primitives for building AI applications. It enables developers to create AI agents with memory and tool-calling capabilities, implement deterministic LLM workflows, and leverage RAG for knowledge integration. With features like model routing, workflow graphs, and automated evals, Mastra provides a complete toolkit for developing, testing, and deploying AI applications.

This documentation covers everything from getting started to advanced features, APIs, and best practices for working with Mastra's agent-based architecture.

The documentation is organized into key sections:
- **docs**: Core documentation covering concepts, features, and implementation details
- **examples**: Practical examples and use cases demonstrating Mastra's capabilities
- **showcase**: A showcase of applications built using Mastra

Each section contains detailed markdown files that provide comprehensive information about Mastra's features and how to use them effectively.


## en
- [Agent Tool Selection | Agent Documentation | Mastra](https://mastra.ai/en/docs/agents/adding-tools): Tools are typed functions that can be executed by agents or workflows, with built-in integration access and parameter validation. Each tool has a schema that defines its inputs, an executor function that implements its logic, and access to configured integrations.
- [adding-voice](https://mastra.ai/en/docs/agents/adding-voice)
- [Using Agent Memory | Agents | Mastra Docs](https://mastra.ai/en/docs/agents/agent-memory): Documentation on how agents in Mastra use memory to store conversation history and contextual information.
- [Using MCP With Mastra | Agents | Mastra Docs](https://mastra.ai/en/docs/agents/mcp-guide): Use MCP in Mastra to integrate third party tools and resources in your AI agents.
- [Creating and Calling Agents | Agent Documentation | Mastra](https://mastra.ai/en/docs/agents/overview): Overview of agents in Mastra, detailing their capabilities and how they interact with tools, workflows, and external systems.
- [Discord Community and Bot | Documentation | Mastra](https://mastra.ai/en/docs/community/discord): Information about the Mastra Discord community and MCP bot.
- [Licensing](https://mastra.ai/en/docs/community/licensing): Mastra License
- [MastraClient](https://mastra.ai/en/docs/deployment/client): Learn how to set up and use the Mastra Client SDK
- [Serverless Deployment](https://mastra.ai/en/docs/deployment/deployment): Build and deploy Mastra applications using platform-specific deployers or standard HTTP servers
- [Creating A Mastra Server](https://mastra.ai/en/docs/deployment/server): Configure and customize the Mastra server with middleware and other options
- [Create your own Eval](https://mastra.ai/en/docs/evals/custom-eval): Mastra allows so create your own evals, here is how.
- [Overview](https://mastra.ai/en/docs/evals/overview): Understanding how to evaluate and measure AI agent quality using Mastra evals.
- [Running in CI](https://mastra.ai/en/docs/evals/running-in-ci): Learn how to run Mastra evals in your CI/CD pipeline to monitor agent quality over time.
- [Textual Evals](https://mastra.ai/en/docs/evals/textual-evals): Understand how Mastra uses LLM-as-judge methodology to evaluate text quality.
- [Licensing](https://mastra.ai/en/docs/faq): Mastra License
- [Using with AI SDK](https://mastra.ai/en/docs/frameworks/ai-sdk): Learn how Mastra leverages the AI SDK library and how you can leverage it further with Mastra
- [Getting started with Mastra and NextJS | Mastra Guides](https://mastra.ai/en/docs/frameworks/next-js): Guide on integrating Mastra with NextJS.
- [Installing Mastra Locally | Getting Started | Mastra Docs](https://mastra.ai/en/docs/getting-started/installation): Guide on installing Mastra and setting up the necessary prerequisites for running it with various LLM providers.
- [Using with Cursor/Windsurf | Getting Started | Mastra Docs](https://mastra.ai/en/docs/getting-started/mcp-docs-server): Learn how to use the Mastra MCP documentation server in your IDE to turn it into an agentic Mastra expert.
- [Local Project Structure | Getting Started | Mastra Docs](https://mastra.ai/en/docs/getting-started/project-structure): Guide on organizing folders and files in Mastra, including best practices and recommended structures.
- [Building an AI Recruiter | Mastra Workflows | Guides](https://mastra.ai/en/docs/guides/ai-recruiter): Guide on building a recruiter workflow in Mastra to gather and process candidate information using LLMs.
- [Building an AI Chef Assistant | Mastra Agent Guides](https://mastra.ai/en/docs/guides/chef-michel): Guide on creating a Chef Assistant agent in Mastra to help users cook meals with available ingredients.
- [Building a Research Paper Assistant | Mastra RAG Guides](https://mastra.ai/en/docs/guides/research-assistant): Guide on creating an AI research assistant that can analyze and answer questions about academic papers using RAG.
- [Building an AI Stock Agent | Mastra Agents | Guides](https://mastra.ai/en/docs/guides/stock-agent): Guide on creating a simple stock agent in Mastra to fetch the last days closing stock price for a given symbol.
- [Introduction | Mastra Docs](https://mastra.ai/en/docs): Mastra is a TypeScript agent framework. It helps you build AI applications and features quickly. It gives you the set of primitives you need: workflows, agents, RAG, integrations, syncs and evals.
- [Using Mastra Integrations | Mastra Local Development Docs](https://mastra.ai/en/docs/integrations): Documentation for Mastra integrations, which are auto-generated, type-safe API clients for third-party services.
- [Adding to an Existing Project | Mastra Local Development Docs](https://mastra.ai/en/docs/local-dev/add-to-existing-project): Add Mastra to your existing Node.js applications
- [Creating a new Project | Mastra Local Development Docs](https://mastra.ai/en/docs/local-dev/creating-a-new-project): Create new Mastra projects or add Mastra to existing Node.js applications using the CLI
- [Inspecting Agents with `mastra dev` | Mastra Local Dev Docs](https://mastra.ai/en/docs/local-dev/mastra-dev): Documentation for the Mastra local development environment for Mastra applications.
- [Logging | Mastra Observability Documentation](https://mastra.ai/en/docs/observability/logging): Documentation on effective logging in Mastra, crucial for understanding application behavior and improving AI accuracy.
- [Next.js Tracing | Mastra Observability Documentation](https://mastra.ai/en/docs/observability/nextjs-tracing): Set up OpenTelemetry tracing for Next.js applications
- [Tracing | Mastra Observability Documentation](https://mastra.ai/en/docs/observability/tracing): Set up OpenTelemetry tracing for Mastra applications
- [Chunking and Embedding Documents | RAG | Mastra Docs](https://mastra.ai/en/docs/rag/chunking-and-embedding): Guide on chunking and embedding documents in Mastra for efficient processing and retrieval.
- [RAG (Retrieval-Augmented Generation) in Mastra | Mastra Docs](https://mastra.ai/en/docs/rag/overview): Overview of Retrieval-Augmented Generation (RAG) in Mastra, detailing its capabilities for enhancing LLM outputs with relevant context.
- [Retrieval, Semantic Search, Reranking | RAG | Mastra Docs](https://mastra.ai/en/docs/rag/retrieval): Guide on retrieval processes in Mastras RAG systems, including semantic search, filtering, and re-ranking.
- [Storing Embeddings in A Vector Database | Mastra Docs](https://mastra.ai/en/docs/rag/vector-databases): Guide on vector storage options in Mastra, including embedded and dedicated vector databases for similarity search.
- [Reference: createTool() | Tools | Agents | Mastra Docs](https://mastra.ai/en/docs/reference/agents/createTool): Documentation for the createTool function in Mastra, which creates custom tools for agents and workflows.
- [Reference: Agent.generate() | Agents | Mastra Docs](https://mastra.ai/en/docs/reference/agents/generate): Documentation for the `.generate()` method in Mastra agents, which produces text or structured responses.
- [Reference: getAgent() | Agent Config | Agents | Mastra Docs](https://mastra.ai/en/docs/reference/agents/getAgent): API Reference for getAgent.
- [Reference: Agent.stream() | Streaming | Agents | Mastra Docs](https://mastra.ai/en/docs/reference/agents/stream): Documentation for the `.stream()` method in Mastra agents, which enables real-time streaming of responses.
- [mastra build](https://mastra.ai/en/docs/reference/cli/build): Build your Mastra project for production deployment
- [`mastra deploy` Reference | Deployment | Mastra CLI](https://mastra.ai/en/docs/reference/cli/deploy): Documentation for the mastra deploy command, which deploys Mastra projects to platforms like Vercel and Cloudflare.
- [`mastra dev` Reference | Local Development | Mastra CLI](https://mastra.ai/en/docs/reference/cli/dev): Documentation for the mastra dev command, which starts a development server for agents, tools, and workflows.
- [`mastra init` reference | Project Creation | Mastra CLI](https://mastra.ai/en/docs/reference/cli/init): Documentation for the mastra init command, which creates a new Mastra project with interactive setup options.
- [agents](https://mastra.ai/en/docs/reference/client-js/agents)
- [error-handling](https://mastra.ai/en/docs/reference/client-js/error-handling)
- [logs](https://mastra.ai/en/docs/reference/client-js/logs)
- [memory](https://mastra.ai/en/docs/reference/client-js/memory)
- [telemetry](https://mastra.ai/en/docs/reference/client-js/telemetry)
- [tools](https://mastra.ai/en/docs/reference/client-js/tools)
- [vectors](https://mastra.ai/en/docs/reference/client-js/vectors)
- [workflows](https://mastra.ai/en/docs/reference/client-js/workflows)
- [Mastra Core](https://mastra.ai/en/docs/reference/core/mastra-class): Documentation for the Mastra Class, the core entry point for managing agents, workflows, and server endpoints.
- [Cloudflare Deployer](https://mastra.ai/en/docs/reference/deployer/cloudflare): Documentation for the CloudflareDeployer class, which deploys Mastra applications to Cloudflare Workers.
- [Mastra Deployer](https://mastra.ai/en/docs/reference/deployer/deployer): Documentation for the Deployer abstract class, which handles packaging and deployment of Mastra applications.
- [Netlify Deployer](https://mastra.ai/en/docs/reference/deployer/netlify): Documentation for the NetlifyDeployer class, which deploys Mastra applications to Netlify Functions.
- [Vercel Deployer](https://mastra.ai/en/docs/reference/deployer/vercel): Documentation for the VercelDeployer class, which deploys Mastra applications to Vercel.
- [Reference: Answer Relevancy | Metrics | Evals | Mastra Docs](https://mastra.ai/en/docs/reference/evals/answer-relevancy): Documentation for the Answer Relevancy Metric in Mastra, which evaluates how well LLM outputs address the input query.
- [Reference: Bias | Output Metrics | Evals | Mastra Docs](https://mastra.ai/en/docs/reference/evals/bias): Documentation for the Bias Metric in Mastra, which evaluates LLM outputs for various forms of bias, including gender, political, racial/ethnic, or geographical bias.
- [Reference: Completeness | Metrics | Evals | Mastra Docs](https://mastra.ai/en/docs/reference/evals/completeness): Documentation for the Completeness Metric in Mastra, which evaluates how thoroughly LLM outputs cover key elements present in the input.
- [Reference: Content Similarity | Evals | Mastra Docs](https://mastra.ai/en/docs/reference/evals/content-similarity): Documentation for the Content Similarity Metric in Mastra, which measures textual similarity between strings and provides a matching score.
- [Reference: Context Position | Metrics | Evals | Mastra Docs](https://mastra.ai/en/docs/reference/evals/context-position): Documentation for the Context Position Metric in Mastra, which evaluates the ordering of context nodes based on their relevance to the query and output.
- [Reference: Context Precision | Metrics | Evals | Mastra Docs](https://mastra.ai/en/docs/reference/evals/context-precision): Documentation for the Context Precision Metric in Mastra, which evaluates the relevance and precision of retrieved context nodes for generating expected outputs.
- [Reference: Context Relevancy | Evals | Mastra Docs](https://mastra.ai/en/docs/reference/evals/context-relevancy): Documentation for the Context Relevancy Metric, which evaluates the relevance of retrieved context in RAG pipelines.
- [Reference: Contextual Recall | Metrics | Evals | Mastra Docs](https://mastra.ai/en/docs/reference/evals/contextual-recall): Documentation for the Contextual Recall Metric, which evaluates the completeness of LLM responses in incorporating relevant context.
- [Reference: Faithfulness | Metrics | Evals | Mastra Docs](https://mastra.ai/en/docs/reference/evals/faithfulness): Documentation for the Faithfulness Metric in Mastra, which evaluates the factual accuracy of LLM outputs compared to the provided context.
- [Reference: Hallucination | Metrics | Evals | Mastra Docs](https://mastra.ai/en/docs/reference/evals/hallucination): Documentation for the Hallucination Metric in Mastra, which evaluates the factual correctness of LLM outputs by identifying contradictions with provided context.
- [Reference: Keyword Coverage | Metrics | Evals | Mastra Docs](https://mastra.ai/en/docs/reference/evals/keyword-coverage): Documentation for the Keyword Coverage Metric in Mastra, which evaluates how well LLM outputs cover important keywords from the input.
- [Reference: Prompt Alignment | Metrics | Evals | Mastra Docs](https://mastra.ai/en/docs/reference/evals/prompt-alignment): Documentation for the Prompt Alignment Metric in Mastra, which evaluates how well LLM outputs adhere to given prompt instructions.
- [Reference: Summarization | Metrics | Evals | Mastra Docs](https://mastra.ai/en/docs/reference/evals/summarization): Documentation for the Summarization Metric in Mastra, which evaluates the quality of LLM-generated summaries for content and factual accuracy.
- [Reference: Textual Difference | Evals | Mastra Docs](https://mastra.ai/en/docs/reference/evals/textual-difference): Documentation for the Textual Difference Metric in Mastra, which measures textual differences between strings using sequence matching.
- [Reference: Tone Consistency | Metrics | Evals | Mastra Docs](https://mastra.ai/en/docs/reference/evals/tone-consistency): Documentation for the Tone Consistency Metric in Mastra, which evaluates emotional tone and sentiment consistency in text.
- [Reference: Toxicity | Metrics | Evals | Mastra Docs](https://mastra.ai/en/docs/reference/evals/toxicity): Documentation for the Toxicity Metric in Mastra, which evaluates LLM outputs for racist, biased, or toxic elements.
- [API Reference](https://mastra.ai/en/docs/reference): Mastra API Reference
- [Memory](https://mastra.ai/en/docs/reference/memory/Memory)
- [createThread](https://mastra.ai/en/docs/reference/memory/createThread)
- [getThreadById](https://mastra.ai/en/docs/reference/memory/getThreadById)
- [getThreadsByResourceId](https://mastra.ai/en/docs/reference/memory/getThreadsByResourceId)
- [Memory Processors | Reference | Mastra Docs](https://mastra.ai/en/docs/reference/memory/memory-processors): Documentation on how to filter and transform messages in Mastra Memory.
- [query](https://mastra.ai/en/docs/reference/memory/query)
- [AgentNetwork (Experimental)](https://mastra.ai/en/docs/reference/networks/agent-network): Reference documentation for the AgentNetwork class
- [Reference: createLogger() | Mastra Observability Docs](https://mastra.ai/en/docs/reference/observability/create-logger): Documentation for the createLogger function, which instantiates a logger based on a given configuration.
- [Reference: Logger Instance | Mastra Observability Docs](https://mastra.ai/en/docs/reference/observability/logger): Documentation for Logger instances, which provide methods to record events at various severity levels.
- [Reference: OtelConfig | Mastra Observability Docs](https://mastra.ai/en/docs/reference/observability/otel-config): Documentation for the OtelConfig object, which configures OpenTelemetry instrumentation, tracing, and exporting behavior.
- [Reference: Braintrust | Observability | Mastra Docs](https://mastra.ai/en/docs/reference/observability/providers/braintrust): Documentation for integrating Braintrust with Mastra, an evaluation and monitoring platform for LLM applications.
- [Reference: Dash0 Integration | Mastra Observability Docs](https://mastra.ai/en/docs/reference/observability/providers/dash0): Documentation for integrating Mastra with Dash0, an Open Telementry native observability solution.
- [Reference: Provider List | Observability | Mastra Docs](https://mastra.ai/en/docs/reference/observability/providers): Overview of observability providers supported by Mastra, including Dash0, SigNoz, Braintrust, Langfuse, and more.
- [Reference: Laminar Integration | Mastra Observability Docs](https://mastra.ai/en/docs/reference/observability/providers/laminar): Documentation for integrating Laminar with Mastra, a specialized observability platform for LLM applications.
- [Reference: Langfuse Integration | Mastra Observability Docs](https://mastra.ai/en/docs/reference/observability/providers/langfuse): Documentation for integrating Langfuse with Mastra, an open-source observability platform for LLM applications.
- [Reference: LangSmith Integration | Mastra Observability Docs](https://mastra.ai/en/docs/reference/observability/providers/langsmith): Documentation for integrating LangSmith with Mastra, a platform for debugging, testing, evaluating, and monitoring LLM applications.
- [Reference: LangWatch Integration | Mastra Observability Docs](https://mastra.ai/en/docs/reference/observability/providers/langwatch): Documentation for integrating LangWatch with Mastra, a specialized observability platform for LLM applications.
- [Reference: New Relic Integration | Mastra Observability Docs](https://mastra.ai/en/docs/reference/observability/providers/new-relic): Documentation for integrating New Relic with Mastra, a comprehensive observability platform supporting OpenTelemetry for full-stack monitoring.
- [Reference: SigNoz Integration | Mastra Observability Docs](https://mastra.ai/en/docs/reference/observability/providers/signoz): Documentation for integrating SigNoz with Mastra, an open-source APM and observability platform providing full-stack monitoring through OpenTelemetry.
- [Reference: Traceloop Integration | Mastra Observability Docs](https://mastra.ai/en/docs/reference/observability/providers/traceloop): Documentation for integrating Traceloop with Mastra, an OpenTelemetry-native observability platform for LLM applications.
- [Reference: Astra Vector Store | Vector Databases | RAG | Mastra Docs](https://mastra.ai/en/docs/reference/rag/astra): Documentation for the AstraVector class in Mastra, which provides vector search using DataStax Astra DB.
- [Reference: Chroma Vector Store | Vector Databases | RAG | Mastra Docs](https://mastra.ai/en/docs/reference/rag/chroma): Documentation for the ChromaVector class in Mastra, which provides vector search using ChromaDB.
- [Reference: .chunk() | Document Processing | RAG | Mastra Docs](https://mastra.ai/en/docs/reference/rag/chunk): Documentation for the chunk function in Mastra, which splits documents into smaller segments using various strategies.
- [Reference: MDocument | Document Processing | RAG | Mastra Docs](https://mastra.ai/en/docs/reference/rag/document): Documentation for the MDocument class in Mastra, which handles document processing and chunking.
- [Reference: embed() | Document Embedding | RAG | Mastra Docs](https://mastra.ai/en/docs/reference/rag/embeddings): Documentation for embedding functionality in Mastra using the AI SDK.
- [Reference: ExtractParams | Document Processing | RAG | Mastra Docs](https://mastra.ai/en/docs/reference/rag/extract-params): Documentation for metadata extraction configuration in Mastra.
- [Reference: GraphRAG | Graph-based RAG | RAG | Mastra Docs](https://mastra.ai/en/docs/reference/rag/graph-rag): Documentation for the GraphRAG class in Mastra, which implements a graph-based approach to retrieval augmented generation.
- [Default Vector Store | Vector Databases | RAG | Mastra Docs](https://mastra.ai/en/docs/reference/rag/libsql): Documentation for the LibSQLVector class in Mastra, which provides vector search using LibSQL with vector extensions.
- [Reference: Metadata Filters | Metadata Filtering | RAG | Mastra Docs](https://mastra.ai/en/docs/reference/rag/metadata-filters): Documentation for metadata filtering capabilities in Mastra, which allow for precise querying of vector search results across different vector stores.
- [Reference: PG Vector Store | Vector Databases | RAG | Mastra Docs](https://mastra.ai/en/docs/reference/rag/pg): Documentation for the PgVector class in Mastra, which provides vector search using PostgreSQL with pgvector extension.
- [Reference: Pinecone Vector Store | Vector DBs | RAG | Mastra Docs](https://mastra.ai/en/docs/reference/rag/pinecone): Documentation for the PineconeVector class in Mastra, which provides an interface to Pinecones vector database.
- [Reference: Qdrant Vector Store | Vector Databases | RAG | Mastra Docs](https://mastra.ai/en/docs/reference/rag/qdrant): Documentation for integrating Qdrant with Mastra, a vector similarity search engine for managing vectors and payloads.
- [Reference: Rerank | Document Retrieval | RAG | Mastra Docs](https://mastra.ai/en/docs/reference/rag/rerank): Documentation for the rerank function in Mastra, which provides advanced reranking capabilities for vector search results.
- [Reference: Turbopuffer Vector Store | Vector Databases | RAG | Mastra Docs](https://mastra.ai/en/docs/reference/rag/turbopuffer): Documentation for integrating Turbopuffer with Mastra, a high-performance vector database for efficient similarity search.
- [Reference: Upstash Vector Store | Vector Databases | RAG | Mastra Docs](https://mastra.ai/en/docs/reference/rag/upstash): Documentation for the UpstashVector class in Mastra, which provides vector search using Upstash Vector.
- [Reference: Cloudflare Vector Store | Vector Databases | RAG | Mastra Docs](https://mastra.ai/en/docs/reference/rag/vectorize): Documentation for the CloudflareVector class in Mastra, which provides vector search using Cloudflare Vectorize.
- [LibSQL Storage | Storage System | Mastra Core](https://mastra.ai/en/docs/reference/storage/libsql): Documentation for the LibSQL storage implementation in Mastra.
- [PostgreSQL Storage | Storage System | Mastra Core](https://mastra.ai/en/docs/reference/storage/postgresql): Documentation for the PostgreSQL storage implementation in Mastra.
- [Upstash Storage | Storage System | Mastra Core](https://mastra.ai/en/docs/reference/storage/upstash): Documentation for the Upstash storage implementation in Mastra.
- [Reference: MastraMCPClient | Tool Discovery | Mastra Docs](https://mastra.ai/en/docs/reference/tools/client): API Reference for MastraMCPClient - A client implementation for the Model Context Protocol.
- [Reference: createDocumentChunkerTool() | Tools | Mastra Docs](https://mastra.ai/en/docs/reference/tools/document-chunker-tool): Documentation for the Document Chunker Tool in Mastra, which splits documents into smaller chunks for efficient processing and retrieval.
- [Reference: createGraphRAGTool() | RAG | Mastra Tools Docs](https://mastra.ai/en/docs/reference/tools/graph-rag-tool): Documentation for the Graph RAG Tool in Mastra, which enhances RAG by building a graph of semantic relationships between documents.
- [Reference: MCPConfiguration | Tool Management | Mastra Docs](https://mastra.ai/en/docs/reference/tools/mcp-configuration): API Reference for MCPConfiguration - A class for managing multiple Model Context Protocol servers and their tools.
- [Reference: createVectorQueryTool() | RAG | Mastra Tools Docs](https://mastra.ai/en/docs/reference/tools/vector-query-tool): Documentation for the Vector Query Tool in Mastra, which facilitates semantic search over vector stores with filtering and reranking capabilities.
- [Reference: CompositeVoice | Voice Providers | Mastra Docs](https://mastra.ai/en/docs/reference/voice/composite-voice): Documentation for the CompositeVoice class, which enables combining multiple voice providers for flexible text-to-speech and speech-to-text operations.
- [Reference: Deepgram Voice | Voice Providers | Mastra Docs](https://mastra.ai/en/docs/reference/voice/deepgram): Documentation for the Deepgram voice implementation, providing text-to-speech and speech-to-text capabilities with multiple voice models and languages.
- [Reference: ElevenLabs Voice | Voice Providers | Mastra Docs](https://mastra.ai/en/docs/reference/voice/elevenlabs): Documentation for the ElevenLabs voice implementation, offering high-quality text-to-speech capabilities with multiple voice models and natural-sounding synthesis.
- [Reference: Google Voice | Voice Providers | Mastra Docs](https://mastra.ai/en/docs/reference/voice/google): Documentation for the Google Voice implementation, providing text-to-speech and speech-to-text capabilities.
- [Reference: MastraVoice | Voice Providers | Mastra Docs](https://mastra.ai/en/docs/reference/voice/mastra-voice): Documentation for the MastraVoice abstract base class, which defines the core interface for all voice services in Mastra, including speech-to-speech capabilities.
- [Reference: Murf Voice | Voice Providers | Mastra Docs](https://mastra.ai/en/docs/reference/voice/murf): Documentation for the Murf voice implementation, providing text-to-speech capabilities.
- [Reference: OpenAI Realtime Voice | Voice Providers | Mastra Docs](https://mastra.ai/en/docs/reference/voice/openai-realtime): Documentation for the OpenAIRealtimeVoice class, providing real-time text-to-speech and speech-to-text capabilities via WebSockets.
- [Reference: OpenAI Voice | Voice Providers | Mastra Docs](https://mastra.ai/en/docs/reference/voice/openai): Documentation for the OpenAIVoice class, providing text-to-speech and speech-to-text capabilities.
- [Reference: PlayAI Voice | Voice Providers | Mastra Docs](https://mastra.ai/en/docs/reference/voice/playai): Documentation for the PlayAI voice implementation, providing text-to-speech capabilities.
- [Reference: Sarvam Voice | Voice Providers | Mastra Docs](https://mastra.ai/en/docs/reference/voice/sarvam): Documentation for the Sarvam class, providing text-to-speech and speech-to-text capabilities.
- [Reference: Speechify Voice | Voice Providers | Mastra Docs](https://mastra.ai/en/docs/reference/voice/speechify): Documentation for the Speechify voice implementation, providing text-to-speech capabilities.
- [Reference: voice.answer() | Voice Providers | Mastra Docs](https://mastra.ai/en/docs/reference/voice/voice.answer): Documentation for the answer() method available in real-time voice providers, which triggers the voice provider to generate a response.
- [Reference: voice.connect() | Voice Providers | Mastra Docs](https://mastra.ai/en/docs/reference/voice/voice.connect): Documentation for the connect() method available in real-time voice providers, which establishes a connection for speech-to-speech communication.
- [Reference: voice.listen() | Voice Providers | Mastra Docs](https://mastra.ai/en/docs/reference/voice/voice.listen): Documentation for the listen() method available in all Mastra voice providers, which converts speech to text.
- [Reference: voice.on() | Voice Providers | Mastra Docs](https://mastra.ai/en/docs/reference/voice/voice.on): Documentation for the on() method available in voice providers, which registers event listeners for voice events.
- [Reference: voice.send() | Voice Providers | Mastra Docs](https://mastra.ai/en/docs/reference/voice/voice.send): Documentation for the send() method available in real-time voice providers, which streams audio data for continuous processing.
- [Reference: voice.speak() | Voice Providers | Mastra Docs](https://mastra.ai/en/docs/reference/voice/voice.speak): Documentation for the speak() method available in all Mastra voice providers, which converts text to speech.
- [Reference: .after() | Building Workflows | Mastra Docs](https://mastra.ai/en/docs/reference/workflows/after): Documentation for the `after()` method in workflows, enabling branching and merging paths.
- [.afterEvent() Method | Mastra Docs](https://mastra.ai/en/docs/reference/workflows/afterEvent): Reference for the afterEvent method in Mastra workflows that creates event-based suspension points.
- [Reference: Workflow.commit() | Running Workflows | Mastra Docs](https://mastra.ai/en/docs/reference/workflows/commit): Documentation for the `.commit()` method in workflows, which re-initializes the workflow machine with the current step configuration.
- [Reference: Workflow.createRun() | Running Workflows | Mastra Docs](https://mastra.ai/en/docs/reference/workflows/createRun): Documentation for the `.createRun()` method in workflows, which initializes a new workflow run instance.
- [Reference: Workflow.else() | Conditional Branching | Mastra Docs](https://mastra.ai/en/docs/reference/workflows/else): Documentation for the `.else()` method in Mastra workflows, which creates an alternative branch when an if condition is false.
- [Event-Driven Workflows | Mastra Docs](https://mastra.ai/en/docs/reference/workflows/events): Learn how to create event-driven workflows using afterEvent and resumeWithEvent methods in Mastra.
- [Reference: Workflow.execute() | Workflows | Mastra Docs](https://mastra.ai/en/docs/reference/workflows/execute): Documentation for the `.execute()` method in Mastra workflows, which runs workflow steps and returns results.
- [Reference: Workflow.if() | Conditional Branching | Mastra Docs](https://mastra.ai/en/docs/reference/workflows/if): Documentation for the `.if()` method in Mastra workflows, which creates conditional branches based on specified conditions.
- [Reference: run.resume() | Running Workflows | Mastra Docs](https://mastra.ai/en/docs/reference/workflows/resume): Documentation for the `.resume()` method in workflows, which continues execution of a suspended workflow step.
- [.resumeWithEvent() Method | Mastra Docs](https://mastra.ai/en/docs/reference/workflows/resumeWithEvent): Reference for the resumeWithEvent method that resumes suspended workflows using event data.
- [Reference: Snapshots | Workflow State Persistence | Mastra Docs](https://mastra.ai/en/docs/reference/workflows/snapshots): Technical reference on snapshots in Mastra - the serialized workflow state that enables suspend and resume functionality
- [Reference: start() | Running Workflows | Mastra Docs](https://mastra.ai/en/docs/reference/workflows/start): Documentation for the `start()` method in workflows, which begins execution of a workflow run.
- [Reference: Step | Building Workflows | Mastra Docs](https://mastra.ai/en/docs/reference/workflows/step-class): Documentation for the Step class, which defines individual units of work within a workflow.
- [Reference: StepCondition | Building Workflows | Mastra](https://mastra.ai/en/docs/reference/workflows/step-condition): Documentation for the step condition class in workflows, which determines whether a step should execute based on the output of previous steps or trigger data.
- [Reference: Workflow.step() | Workflows | Mastra Docs](https://mastra.ai/en/docs/reference/workflows/step-function): Documentation for the `.step()` method in workflows, which adds a new step to the workflow.
- [Reference: StepOptions | Building Workflows | Mastra Docs](https://mastra.ai/en/docs/reference/workflows/step-options): Documentation for the step options in workflows, which control variable mapping, execution conditions, and other runtime behavior.
- [Step Retries | Error Handling | Mastra Docs](https://mastra.ai/en/docs/reference/workflows/step-retries): Automatically retry failed steps in Mastra workflows with configurable retry policies.
- [Reference: suspend() | Control Flow | Mastra Docs](https://mastra.ai/en/docs/reference/workflows/suspend): Documentation for the suspend function in Mastra workflows, which pauses execution until resumed.
- [Reference: Workflow.then() | Building Workflows | Mastra Docs](https://mastra.ai/en/docs/reference/workflows/then): Documentation for the `.then()` method in workflows, which creates sequential dependencies between steps.
- [Reference: Workflow.until() | Looping in Workflows | Mastra Docs](https://mastra.ai/en/docs/reference/workflows/until): Documentation for the `.until()` method in Mastra workflows, which repeats a step until a specified condition becomes true.
- [Reference: run.watch() | Workflows | Mastra Docs](https://mastra.ai/en/docs/reference/workflows/watch): Documentation for the `.watch()` method in workflows, which monitors the status of a workflow run.
- [Reference: Workflow.while() | Looping in Workflows | Mastra Docs](https://mastra.ai/en/docs/reference/workflows/while): Documentation for the `.while()` method in Mastra workflows, which repeats a step as long as a specified condition remains true.
- [Reference: Workflow Class | Building Workflows | Mastra Docs](https://mastra.ai/en/docs/reference/workflows/workflow): Documentation for the Workflow class in Mastra, which enables you to create state machines for complex sequences of operations with conditional branching and data validation.
- [Storage in Mastra | Mastra Docs](https://mastra.ai/en/docs/storage/overview): Overview of Mastras storage system and data persistence capabilities.
- [Voice in Mastra | Mastra Docs](https://mastra.ai/en/docs/voice/overview): Overview of voice capabilities in Mastra, including text-to-speech, speech-to-text, and real-time voice-to-voice interactions.
- [Speech-to-Text (STT) in Mastra | Mastra Docs](https://mastra.ai/en/docs/voice/speech-to-text): Overview of Speech-to-Text capabilities in Mastra, including configuration, usage, and integration with voice providers.
- [Text-to-Speech (TTS) in Mastra | Mastra Docs](https://mastra.ai/en/docs/voice/text-to-speech): Overview of Text-to-Speech capabilities in Mastra, including configuration, usage, and integration with voice providers.
- [Voice-to-Voice Capabilities in Mastra | Mastra Docs](https://mastra.ai/en/docs/voice/voice-to-voice): Overview of voice-to-voice capabilities in Mastra, including real-time interactions and event-driven architecture.
- [Branching, Merging, Conditions | Workflows | Mastra Docs](https://mastra.ai/en/docs/workflows/control-flow): Control flow in Mastra workflows allows you to manage branching, merging, and conditions to construct workflows that meet your logic requirements.
- [Dynamic Workflows | Mastra Docs](https://mastra.ai/en/docs/workflows/dynamic-workflows): Learn how to create dynamic workflows within workflow steps, allowing for flexible workflow creation based on runtime conditions.
- [Error Handling in Workflows | Mastra Docs](https://mastra.ai/en/docs/workflows/error-handling): Learn how to handle errors in Mastra workflows using step retries, conditional branching, and monitoring.
- [nested-workflows](https://mastra.ai/en/docs/workflows/nested-workflows)
- [Handling Complex LLM Operations | Workflows | Mastra](https://mastra.ai/en/docs/workflows/overview): Workflows in Mastra help you orchestrate complex sequences of operations with features like branching, parallel execution, resource suspension, and more.
- [Creating Steps and Adding to Workflows | Mastra Docs](https://mastra.ai/en/docs/workflows/steps): Steps in Mastra workflows provide a structured way to manage operations by defining inputs, outputs, and execution logic.
- [Suspend & Resume Workflows | Human-in-the-Loop | Mastra Docs](https://mastra.ai/en/docs/workflows/suspend-and-resume): Suspend and resume in Mastra workflows allows you to pause execution while waiting for external input or resources.
- [Data Mapping with Workflow Variables | Mastra Docs](https://mastra.ai/en/docs/workflows/variables): Learn how to use workflow variables to map data between steps and create dynamic data flows in your Mastra workflows.
- [Example: Adding Voice Capabilities | Agents | Mastra](https://mastra.ai/en/examples/agents/adding-voice-capabilities): Example of adding voice capabilities to Mastra agents, enabling them to speak and listen using different voice providers.
- [Example: Calling Agentic Workflows | Agents | Mastra Docs](https://mastra.ai/en/examples/agents/agentic-workflows): Example of creating AI workflows in Mastra, demonstrating integration of external APIs with LLM-powered planning.
- [Example: Categorizing Birds | Agents | Mastra Docs](https://mastra.ai/en/examples/agents/bird-checker): Example of using a Mastra AI Agent to determine if an image from Unsplash depicts a bird.
- [Example: Hierarchical Multi-Agent System | Agents | Mastra](https://mastra.ai/en/examples/agents/hierarchical-multi-agent): Example of creating a hierarchical multi-agent system using Mastra, where agents interact through tool functions.
- [Example: Multi-Agent Workflow | Agents | Mastra Docs](https://mastra.ai/en/examples/agents/multi-agent-workflow): Example of creating an agentic workflow in Mastra, where work product is passed between multiple agents.
- [Example: Agents with a System Prompt | Agents | Mastra Docs](https://mastra.ai/en/examples/agents/system-prompt): Example of creating an AI agent in Mastra with a system prompt to define its personality and capabilities.
- [Example: Giving an Agent a Tool | Agents | Mastra Docs](https://mastra.ai/en/examples/agents/using-a-tool): Example of creating an AI agent in Mastra that uses a dedicated tool to provide weather information.
- [Example: Answer Relevancy | Evals | Mastra Docs](https://mastra.ai/en/examples/evals/answer-relevancy): Example of using the Answer Relevancy metric to evaluate response relevancy to queries.
- [Example: Bias | Evals | Mastra Docs](https://mastra.ai/en/examples/evals/bias): Example of using the Bias metric to evaluate responses for various forms of bias.
- [Example: Completeness | Evals | Mastra Docs](https://mastra.ai/en/examples/evals/completeness): Example of using the Completeness metric to evaluate how thoroughly responses cover input elements.
- [Example: Content Similarity | Evals | Mastra Docs](https://mastra.ai/en/examples/evals/content-similarity): Example of using the Content Similarity metric to evaluate text similarity between content.
- [Example: Context Position | Evals | Mastra Docs](https://mastra.ai/en/examples/evals/context-position): Example of using the Context Position metric to evaluate sequential ordering in responses.
- [Example: Context Precision | Evals | Mastra Docs](https://mastra.ai/en/examples/evals/context-precision): Example of using the Context Precision metric to evaluate how precisely context information is used.
- [Example: Context Relevancy | Evals | Mastra Docs](https://mastra.ai/en/examples/evals/context-relevancy): Example of using the Context Relevancy metric to evaluate how relevant context information is to a query.
- [Example: Contextual Recall | Evals | Mastra Docs](https://mastra.ai/en/examples/evals/contextual-recall): Example of using the Contextual Recall metric to evaluate how well responses incorporate context information.
- [Example: Custom Eval | Evals | Mastra Docs](https://mastra.ai/en/examples/evals/custom-eval): Example of creating custom LLM-based evaluation metrics in Mastra.
- [Example: Faithfulness | Evals | Mastra Docs](https://mastra.ai/en/examples/evals/faithfulness): Example of using the Faithfulness metric to evaluate how factually accurate responses are compared to context.
- [Example: Hallucination | Evals | Mastra Docs](https://mastra.ai/en/examples/evals/hallucination): Example of using the Hallucination metric to evaluate factual contradictions in responses.
- [Example: Keyword Coverage | Evals | Mastra Docs](https://mastra.ai/en/examples/evals/keyword-coverage): Example of using the Keyword Coverage metric to evaluate how well responses cover important keywords from input text.
- [Example: Prompt Alignment | Evals | Mastra Docs](https://mastra.ai/en/examples/evals/prompt-alignment): Example of using the Prompt Alignment metric to evaluate instruction adherence in responses.
- [Example: Summarization | Evals | Mastra Docs](https://mastra.ai/en/examples/evals/summarization): Example of using the Summarization metric to evaluate how well LLM-generated summaries capture content while maintaining factual accuracy.
- [Example: Textual Difference | Evals | Mastra Docs](https://mastra.ai/en/examples/evals/textual-difference): Example of using the Textual Difference metric to evaluate similarity between text strings by analyzing sequence differences and changes.
- [Example: Tone Consistency | Evals | Mastra Docs](https://mastra.ai/en/examples/evals/tone-consistency): Example of using the Tone Consistency metric to evaluate emotional tone patterns and sentiment consistency in text.
- [Example: Toxicity | Evals | Mastra Docs](https://mastra.ai/en/examples/evals/toxicity): Example of using the Toxicity metric to evaluate responses for harmful content and toxic language.
- [Example: Word Inclusion | Evals | Mastra Docs](https://mastra.ai/en/examples/evals/word-inclusion): Example of creating a custom metric to evaluate word inclusion in output text.
- [Examples List: Workflows, Agents, RAG | Mastra Docs](https://mastra.ai/en/examples): Explore practical examples of AI development with Mastra, including text generation, RAG implementations, structured outputs, and multi-modal interactions. Learn how to build AI applications using OpenAI, Anthropic, and Google Gemini.
- [Memory Processors](https://mastra.ai/en/examples/memory/memory-processors): Example of using memory processors to filter and transform recalled messages
- [memory-with-libsql](https://mastra.ai/en/examples/memory/memory-with-libsql)
- [memory-with-pg](https://mastra.ai/en/examples/memory/memory-with-pg)
- [memory-with-upstash](https://mastra.ai/en/examples/memory/memory-with-upstash)
- [Streaming Working Memory (advanced)](https://mastra.ai/en/examples/memory/streaming-working-memory-advanced): Example of using working memory to maintain a todo list across conversations
- [Streaming Working Memory](https://mastra.ai/en/examples/memory/streaming-working-memory): Example of using working memory with an agent
- [Example: Adjusting Chunk Delimiters | RAG | Mastra Docs](https://mastra.ai/en/examples/rag/chunking/adjust-chunk-delimiters): Adjust chunk delimiters in Mastra to better match your content structure.
- [Example: Adjusting The Chunk Size | RAG | Mastra Docs](https://mastra.ai/en/examples/rag/chunking/adjust-chunk-size): Adjust chunk size in Mastra to better match your content and memory requirements.
- [Example: Semantically Chunking HTML | RAG | Mastra Docs](https://mastra.ai/en/examples/rag/chunking/chunk-html): Chunk HTML content in Mastra to semantically chunk the document.
- [Example: Semantically Chunking JSON | RAG | Mastra Docs](https://mastra.ai/en/examples/rag/chunking/chunk-json): Chunk JSON data in Mastra to semantically chunk the document.
- [Example: Semantically Chunking Markdown | RAG | Mastra Docs](https://mastra.ai/en/examples/rag/chunking/chunk-markdown): Example of using Mastra to chunk markdown documents for search or retrieval purposes.
- [Example: Semantically Chunking Text | RAG | Mastra Docs](https://mastra.ai/en/examples/rag/chunking/chunk-text): Example of using Mastra to split large text documents into smaller chunks for processing.
- [Example: Embedding Chunk Arrays | RAG | Mastra Docs](https://mastra.ai/en/examples/rag/embedding/embed-chunk-array): Example of using Mastra to generate embeddings for an array of text chunks for similarity search.
- [Example: Embedding Text Chunks | RAG | Mastra Docs](https://mastra.ai/en/examples/rag/embedding/embed-text-chunk): Example of using Mastra to generate an embedding for a single text chunk for similarity search.
- [Example: Embedding Text with Cohere | RAG | Mastra Docs](https://mastra.ai/en/examples/rag/embedding/embed-text-with-cohere): Example of using Mastra to generate embeddings using Coheres embedding model.
- [Example: Metadata Extraction | Retrieval | RAG | Mastra Docs](https://mastra.ai/en/examples/rag/embedding/metadata-extraction): Example of extracting and utilizing metadata from documents in Mastra for enhanced document processing and retrieval.
- [Example: Hybrid Vector Search | RAG | Mastra Docs](https://mastra.ai/en/examples/rag/query/hybrid-vector-search): Example of using metadata filters with PGVector to enhance vector search results in Mastra.
- [Example: Retrieving Top-K Results | RAG | Mastra Docs](https://mastra.ai/en/examples/rag/query/retrieve-results): Example of using Mastra to query a vector database and retrieve semantically similar chunks.
- [Example: Re-ranking Results with Tools | Retrieval | RAG | Mastra Docs](https://mastra.ai/en/examples/rag/rerank/rerank-rag): Example of implementing a RAG system with re-ranking in Mastra using OpenAI embeddings and PGVector for vector storage.
- [Example: Re-ranking Results | Retrieval | RAG | Mastra Docs](https://mastra.ai/en/examples/rag/rerank/rerank): Example of implementing semantic re-ranking in Mastra using OpenAI embeddings and PGVector for vector storage.
- [Example: Reranking with Cohere | RAG | Mastra Docs](https://mastra.ai/en/examples/rag/rerank/reranking-with-cohere): Example of using Mastra to improve document retrieval relevance with Coheres reranking service.
- [Example: Upsert Embeddings | RAG | Mastra Docs](https://mastra.ai/en/examples/rag/upsert/upsert-embeddings): Examples of using Mastra to store embeddings in various vector databases for similarity search.
- [Example: Using the Vector Query Tool | RAG | Mastra Docs](https://mastra.ai/en/examples/rag/usage/basic-rag): Example of implementing a basic RAG system in Mastra using OpenAI embeddings and PGVector for vector storage.
- [Example: Optimizing Information Density | RAG | Mastra Docs](https://mastra.ai/en/examples/rag/usage/cleanup-rag): Example of implementing a RAG system in Mastra to optimize information density and deduplicate data using LLM-based processing.
- [Example: Chain of Thought Prompting | RAG | Mastra Docs](https://mastra.ai/en/examples/rag/usage/cot-rag): Example of implementing a RAG system in Mastra with chain-of-thought reasoning using OpenAI and PGVector.
- [Example: Structured Reasoning with Workflows | RAG | Mastra Docs](https://mastra.ai/en/examples/rag/usage/cot-workflow-rag): Example of implementing structured reasoning in a RAG system using Mastras workflow capabilities.
- [Example: Agent-Driven Metadata Filtering | Retrieval | RAG | Mastra Docs](https://mastra.ai/en/examples/rag/usage/filter-rag): Example of using a Mastra agent in a RAG system to construct and apply metadata filters for document retrieval.
- [Example: A Complete Graph RAG System | RAG | Mastra Docs](https://mastra.ai/en/examples/rag/usage/graph-rag): Example of implementing a Graph RAG system in Mastra using OpenAI embeddings and PGVector for vector storage.
- [Example: Speech to Text | Voice | Mastra Docs](https://mastra.ai/en/examples/voice/speech-to-text): Example of using Mastra to create a speech to text application.
- [Example: Text to Speech | Voice | Mastra Docs](https://mastra.ai/en/examples/voice/text-to-speech): Example of using Mastra to create a text to speech application.
- [Example: Branching Paths | Workflows | Mastra Docs](https://mastra.ai/en/examples/workflows/branching-paths): Example of using Mastra to create workflows with branching paths based on intermediate results.
- [Example: Calling an Agent from a Workflow | Mastra Docs](https://mastra.ai/en/examples/workflows/calling-agent): Example of using Mastra to call an AI agent from within a workflow step.
- [Example: Conditional Branching (experimental) | Workflows | Mastra Docs](https://mastra.ai/en/examples/workflows/conditional-branching): Example of using Mastra to create conditional branches in workflows using if/else statements.
- [Example: Creating a Workflow | Workflows | Mastra Docs](https://mastra.ai/en/examples/workflows/creating-a-workflow): Example of using Mastra to define and execute a simple workflow with a single step.
- [Example: Cyclical Dependencies | Workflows | Mastra Docs](https://mastra.ai/en/examples/workflows/cyclical-dependencies): Example of using Mastra to create workflows with cyclical dependencies and conditional loops.
- [Example: Human in the Loop | Workflows | Mastra Docs](https://mastra.ai/en/examples/workflows/human-in-the-loop): Example of using Mastra to create workflows with human intervention points.
- [Example: Parallel Execution | Workflows | Mastra Docs](https://mastra.ai/en/examples/workflows/parallel-steps): Example of using Mastra to execute multiple independent tasks in parallel within a workflow.
- [Example: Sequential Steps | Workflows | Mastra Docs](https://mastra.ai/en/examples/workflows/sequential-steps): Example of using Mastra to chain workflow steps in a specific sequence, passing data between them.
- [Example: Suspend and Resume | Workflows | Mastra Docs](https://mastra.ai/en/examples/workflows/suspend-and-resume): Example of using Mastra to suspend and resume workflow steps during execution.
- [Example: Using a Tool as a Step | Workflows | Mastra Docs](https://mastra.ai/en/examples/workflows/using-a-tool-as-a-step): Example of using Mastra to integrate a custom tool as a step in a workflow.
- [Data Mapping with Workflow Variables | Mastra Examples](https://mastra.ai/en/examples/workflows/workflow-variables): Learn how to use workflow variables to map data between steps in Mastra workflows.
- [Showcase](https://mastra.ai/en/showcase): Check out these applications built with Mastra

## ja
- [エージェントツールの選択 | エージェントドキュメント | Mastra](https://mastra.ai/ja/docs/agents/adding-tools): ツールは、エージェントやワークフローによって実行できる型付き関数であり、組み込みの統合アクセスとパラメータ検証を備えています。各ツールには、その入力を定義するスキーマ、ロジックを実装するエグゼキュータ関数、および設定された統合へのアクセスがあります。
- [adding-voice](https://mastra.ai/ja/docs/agents/adding-voice)
- [エージェントメモリの使用 | エージェント | Mastra ドキュメント](https://mastra.ai/ja/docs/agents/agent-memory): Mastraのエージェントが会話履歴とコンテキスト情報を保存するためにメモリを使用する方法に関するドキュメント。
- [MCPをMastraで使用する | エージェント | Mastraドキュメント](https://mastra.ai/ja/docs/agents/mcp-guide): MastraでMCPを使用して、AIエージェントにサードパーティのツールやリソースを統合します。
- [エージェントの作成と呼び出し | エージェントドキュメンテーション | Mastra](https://mastra.ai/ja/docs/agents/overview): Mastraにおけるエージェントの概要、その機能とツール、ワークフロー、外部システムとの連携方法の詳細。
- [Discord コミュニティとボット | ドキュメント | Mastra](https://mastra.ai/ja/docs/community/discord): Mastra Discord コミュニティと MCP ボットに関する情報。
- [ライセンス](https://mastra.ai/ja/docs/community/licensing): Mastraライセンス
- [MastraClient](https://mastra.ai/ja/docs/deployment/client): Mastra Client SDK の設定と使用方法を学ぶ
- [サーバーレスデプロイ](https://mastra.ai/ja/docs/deployment/deployment): プラットフォーム固有のデプロイヤーや標準のHTTPサーバーを使用してMastraアプリケーションを構築およびデプロイする
- [Mastraサーバーの作成](https://mastra.ai/ja/docs/deployment/server): ミドルウェアやその他のオプションでMastraサーバーを設定およびカスタマイズする
- [独自のEvalを作成する](https://mastra.ai/ja/docs/evals/custom-eval): Mastraでは独自の評価を作成することができます。方法は以下の通りです。
- [概要](https://mastra.ai/ja/docs/evals/overview): Mastra evalsを使用してAIエージェントの品質を評価および測定する方法を理解する。
- [CIでの実行](https://mastra.ai/ja/docs/evals/running-in-ci): 時間の経過とともにエージェントの品質を監視するために、CI/CDパイプラインでMastra評価を実行する方法を学びます。
- [テキスト評価](https://mastra.ai/ja/docs/evals/textual-evals): MastraがLLM-as-judgeの方法論を使用してテキストの品質を評価する方法を理解する。
- [ライセンス](https://mastra.ai/ja/docs/faq): Mastra ライセンス
- [AI SDKの使用](https://mastra.ai/ja/docs/frameworks/ai-sdk): MastraがAI SDKライブラリを活用する方法と、Mastraでさらに活用する方法を学びましょう
- [MastraとNextJSの始め方 | Mastraガイド](https://mastra.ai/ja/docs/frameworks/next-js): MastraをNextJSと統合するためのガイド。
- [Mastraをローカルにインストールする | はじめに | Mastraドキュメント](https://mastra.ai/ja/docs/getting-started/installation): Mastraのインストールと、様々なLLMプロバイダーで実行するために必要な前提条件のセットアップに関するガイド。
- [Cursor/Windsurfと一緒に使う | はじめに | Mastra ドキュメント](https://mastra.ai/ja/docs/getting-started/mcp-docs-server): Mastra MCP ドキュメントサーバーをIDEで使用して、エージェント的なMastraの専門家に変える方法を学びます。
- [ローカルプロジェクト構造 | はじめに | Mastra ドキュメント](https://mastra.ai/ja/docs/getting-started/project-structure): Mastraでのフォルダとファイルの整理に関するガイド、ベストプラクティスと推奨される構造を含みます。
- [AI採用担当者の構築 | Mastraワークフロー | ガイド](https://mastra.ai/ja/docs/guides/ai-recruiter): LLMを使用して候補者情報を収集・処理するMastraでの採用担当者ワークフローの構築ガイド。
- [AIシェフアシスタントの構築 | Mastraエージェントガイド](https://mastra.ai/ja/docs/guides/chef-michel): 利用可能な食材で料理を作るユーザーを支援するMastraでのシェフアシスタントエージェントの作成ガイド。
- [研究論文アシスタントの構築 | Mastra RAG ガイド](https://mastra.ai/ja/docs/guides/research-assistant): RAGを使用して学術論文を分析し、質問に答えるAI研究アシスタントの作成に関するガイド。
- [AI株式エージェントの構築 | Mastraエージェント | ガイド](https://mastra.ai/ja/docs/guides/stock-agent): 指定されたシンボルの前日の終値を取得するためのシンプルな株式エージェントをMastraで作成するガイド。
- [イントロダクション | Mastra ドキュメント](https://mastra.ai/ja/docs): MastraはTypeScriptエージェントフレームワークです。AIアプリケーションや機能を迅速に構築するのに役立ちます。ワークフロー、エージェント、RAG、統合、同期、評価といった必要なプリミティブのセットを提供します。
- [Mastra 統合の使用 | Mastra ローカル開発ドキュメント](https://mastra.ai/ja/docs/integrations): サードパーティサービスのために自動生成された型安全なAPIクライアントであるMastra統合のドキュメント。
- [既存プロジェクトへの追加 | Mastra ローカル開発ドキュメント](https://mastra.ai/ja/docs/local-dev/add-to-existing-project): 既存のNode.jsアプリケーションにMastraを追加する
- [新しいプロジェクトの作成 | Mastra ローカル開発ドキュメント](https://mastra.ai/ja/docs/local-dev/creating-a-new-project): CLIを使用して新しいMastraプロジェクトを作成するか、既存のNode.jsアプリケーションにMastraを追加します
- [`mastra dev`でエージェントを検査する | Mastra ローカル開発ドキュメント](https://mastra.ai/ja/docs/local-dev/mastra-dev): MastraアプリケーションのためのMastraローカル開発環境のドキュメント。
- [ログ | Mastra Observability ドキュメント](https://mastra.ai/ja/docs/observability/logging): Mastraにおける効果的なログ記録に関するドキュメントで、アプリケーションの動作を理解し、AIの精度を向上させるために重要です。
- [Next.js トレーシング | Mastra オブザーバビリティ ドキュメント](https://mastra.ai/ja/docs/observability/nextjs-tracing): Next.js アプリケーションのための OpenTelemetry トレーシングの設定
- [トレーシング | Mastra オブザーバビリティ ドキュメント](https://mastra.ai/ja/docs/observability/tracing): Mastra アプリケーションのための OpenTelemetry トレーシングの設定
- [ドキュメントのチャンク化と埋め込み | RAG | Mastra ドキュメント](https://mastra.ai/ja/docs/rag/chunking-and-embedding): 効率的な処理と検索のためのMastraにおけるドキュメントのチャンク化と埋め込みに関するガイド。
- [MastraにおけるRAG（検索強化生成） | Mastra ドキュメント](https://mastra.ai/ja/docs/rag/overview): Mastraにおける検索強化生成（RAG）の概要、関連するコンテキストでLLMの出力を強化するための機能を詳述。
- [検索、セマンティック検索、再ランキング | RAG | Mastra ドキュメント](https://mastra.ai/ja/docs/rag/retrieval): Mastra の RAG システムにおける検索プロセス、セマンティック検索、フィルタリング、再ランキングに関するガイド。
- [ベクトルデータベースに埋め込みを保存する | Mastra ドキュメント](https://mastra.ai/ja/docs/rag/vector-databases): Mastraにおけるベクトルストレージオプションのガイド。類似性検索のための埋め込みベクトルデータベースと専用ベクトルデータベースを含む。
- [リファレンス: createTool() | ツール | エージェント | Mastra ドキュメント](https://mastra.ai/ja/docs/reference/agents/createTool): MastraのcreateTool関数に関するドキュメントで、エージェントとワークフローのためのカスタムツールを作成します。
- [リファレンス: Agent.generate() | エージェント | Mastra ドキュメント](https://mastra.ai/ja/docs/reference/agents/generate): Mastra エージェントの `.generate()` メソッドに関するドキュメントで、テキストまたは構造化された応答を生成します。
- [リファレンス: getAgent() | エージェント設定 | エージェント | Mastra ドキュメント](https://mastra.ai/ja/docs/reference/agents/getAgent): getAgent の API リファレンス。
- [リファレンス: Agent.stream() | ストリーミング | エージェント | Mastra ドキュメント](https://mastra.ai/ja/docs/reference/agents/stream): Mastra エージェントの `.stream()` メソッドに関するドキュメントで、リアルタイムのレスポンスストリーミングを可能にします。
- [mastra build](https://mastra.ai/ja/docs/reference/cli/build): Mastraプロジェクトを本番環境にデプロイするためのビルド
- [`mastra deploy` リファレンス | デプロイメント | Mastra CLI](https://mastra.ai/ja/docs/reference/cli/deploy): MastraプロジェクトをVercelやCloudflareのようなプラットフォームにデプロイするためのmastra deployコマンドのドキュメント。
- [`mastra dev` リファレンス | ローカル開発 | Mastra CLI](https://mastra.ai/ja/docs/reference/cli/dev): エージェント、ツール、ワークフローのための開発サーバーを開始するmastra devコマンドのドキュメント。
- [`mastra init` リファレンス | プロジェクト作成 | Mastra CLI](https://mastra.ai/ja/docs/reference/cli/init): インタラクティブなセットアップオプションで新しいMastraプロジェクトを作成するmastra initコマンドのドキュメント。
- [agents](https://mastra.ai/ja/docs/reference/client-js/agents)
- [error-handling](https://mastra.ai/ja/docs/reference/client-js/error-handling)
- [logs](https://mastra.ai/ja/docs/reference/client-js/logs)
- [memory](https://mastra.ai/ja/docs/reference/client-js/memory)
- [telemetry](https://mastra.ai/ja/docs/reference/client-js/telemetry)
- [tools](https://mastra.ai/ja/docs/reference/client-js/tools)
- [vectors](https://mastra.ai/ja/docs/reference/client-js/vectors)
- [workflows](https://mastra.ai/ja/docs/reference/client-js/workflows)
- [Mastra Core](https://mastra.ai/ja/docs/reference/core/mastra-class): エージェント、ワークフロー、サーバーエンドポイントを管理するためのコアエントリーポイントであるMastraクラスのドキュメント。
- [Cloudflare デプロイヤー](https://mastra.ai/ja/docs/reference/deployer/cloudflare): Cloudflare Workers に Mastra アプリケーションをデプロイする CloudflareDeployer クラスのドキュメント。
- [Mastra デプロイヤー](https://mastra.ai/ja/docs/reference/deployer/deployer): Mastra アプリケーションのパッケージングとデプロイを処理する Deployer 抽象クラスのドキュメント。
- [Netlify デプロイヤー](https://mastra.ai/ja/docs/reference/deployer/netlify): NetlifyDeployer クラスのドキュメントで、Mastra アプリケーションを Netlify Functions にデプロイします。
- [Vercel デプロイヤー](https://mastra.ai/ja/docs/reference/deployer/vercel): Mastra アプリケーションを Vercel にデプロイする VercelDeployer クラスのドキュメント。
- [リファレンス: 回答の関連性 | メトリクス | 評価 | Mastra ドキュメント](https://mastra.ai/ja/docs/reference/evals/answer-relevancy): Mastraにおける回答の関連性メトリクスのドキュメントで、LLMの出力が入力クエリにどれだけ適切に対応しているかを評価します。
- [リファレンス: バイアス | 出力メトリクス | Evals | Mastra ドキュメント](https://mastra.ai/ja/docs/reference/evals/bias): 性別、政治、民族/人種、地理的バイアスを含む様々なバイアスに対するLLM出力を評価する、Mastraのバイアスメトリクスに関するドキュメント。
- [リファレンス: 完全性 | メトリクス | Evals | Mastra ドキュメント](https://mastra.ai/ja/docs/reference/evals/completeness): 入力に存在する重要な要素をどの程度網羅しているかを評価する、Mastra の完全性メトリクスに関するドキュメント。
- [リファレンス: コンテンツ類似性 | Evals | Mastra ドキュメント](https://mastra.ai/ja/docs/reference/evals/content-similarity): Mastraにおけるコンテンツ類似性メトリックのドキュメントで、文字列間のテキスト類似性を測定し、マッチングスコアを提供します。
- [リファレンス: コンテキスト位置 | メトリクス | Evals | Mastra ドキュメント](https://mastra.ai/ja/docs/reference/evals/context-position): Mastraにおけるコンテキスト位置メトリクスのドキュメントで、クエリと出力に対する関連性に基づいてコンテキストノードの順序を評価します。
- [リファレンス: コンテキスト精度 | メトリクス | Evals | Mastra ドキュメント](https://mastra.ai/ja/docs/reference/evals/context-precision): Mastraにおけるコンテキスト精度メトリクスのドキュメントで、期待される出力を生成するために取得されたコンテキストノードの関連性と精度を評価します。
- [リファレンス: コンテキストの関連性 | Evals | Mastra Docs](https://mastra.ai/ja/docs/reference/evals/context-relevancy): RAGパイプラインで取得されたコンテキストの関連性を評価するコンテキスト関連性メトリックのドキュメント。
- [リファレンス: コンテクストリコール | メトリクス | Evals | Mastra ドキュメント](https://mastra.ai/ja/docs/reference/evals/contextual-recall): 関連するコンテクストを組み込む際のLLM応答の完全性を評価するコンテクストリコールメトリクスのドキュメント。
- [リファレンス: Faithfulness | メトリクス | Evals | Mastra ドキュメント](https://mastra.ai/ja/docs/reference/evals/faithfulness): 提供されたコンテキストと比較して、LLM出力の事実の正確性を評価するMastraのFaithfulnessメトリクスのドキュメント。
- [リファレンス: 幻覚 | メトリクス | Evals | Mastra ドキュメント](https://mastra.ai/ja/docs/reference/evals/hallucination): 提供されたコンテキストと矛盾する点を特定することで、LLM出力の事実の正確性を評価するMastraの幻覚メトリクスに関するドキュメント。
- [リファレンス: キーワードカバレッジ | メトリクス | Evals | Mastra ドキュメント](https://mastra.ai/ja/docs/reference/evals/keyword-coverage): Mastraにおけるキーワードカバレッジメトリクスのドキュメントで、LLMの出力が入力の重要なキーワードをどれだけカバーしているかを評価します。
- [リファレンス: プロンプトアラインメント | メトリクス | Evals | Mastra ドキュメント](https://mastra.ai/ja/docs/reference/evals/prompt-alignment): Mastraにおけるプロンプトアラインメントメトリクスのドキュメントで、LLMの出力が与えられたプロンプト指示にどれだけ従っているかを評価します。
- [リファレンス: 要約 | メトリクス | Evals | Mastra ドキュメント](https://mastra.ai/ja/docs/reference/evals/summarization): Mastraにおける要約メトリクスのドキュメントで、コンテンツと事実の正確性に関するLLM生成の要約の品質を評価します。
- [リファレンス: テキスト差分 | Evals | Mastra ドキュメント](https://mastra.ai/ja/docs/reference/evals/textual-difference): Mastraにおけるテキスト差分メトリックのドキュメントで、シーケンスマッチングを使用して文字列間のテキスト差分を測定します。
- [リファレンス: トーンの一貫性 | メトリクス | Evals | Mastra ドキュメント](https://mastra.ai/ja/docs/reference/evals/tone-consistency): Mastraにおけるトーンの一貫性メトリクスのドキュメントで、テキストの感情的トーンと感情の一貫性を評価します。
- [リファレンス: 有害性 | メトリクス | Evals | Mastra ドキュメント](https://mastra.ai/ja/docs/reference/evals/toxicity): 人種差別的、偏見的、または有害な要素を持つLLM出力を評価するMastraの有害性メトリクスに関するドキュメント。
- [APIリファレンス](https://mastra.ai/ja/docs/reference): Mastra APIリファレンス
- [Memory](https://mastra.ai/ja/docs/reference/memory/Memory)
- [createThread](https://mastra.ai/ja/docs/reference/memory/createThread)
- [getThreadById](https://mastra.ai/ja/docs/reference/memory/getThreadById)
- [getThreadsByResourceId](https://mastra.ai/ja/docs/reference/memory/getThreadsByResourceId)
- [メモリプロセッサ | リファレンス | Mastra ドキュメント](https://mastra.ai/ja/docs/reference/memory/memory-processors): Mastra Memoryでメッセージをフィルタリングおよび変換する方法に関するドキュメント。
- [query](https://mastra.ai/ja/docs/reference/memory/query)
- [AgentNetwork（実験的）](https://mastra.ai/ja/docs/reference/networks/agent-network): AgentNetworkクラスのリファレンスドキュメント
- [リファレンス: createLogger() | Mastra Observability ドキュメント](https://mastra.ai/ja/docs/reference/observability/create-logger): 指定された設定に基づいてロガーをインスタンス化する createLogger 関数のドキュメント。
- [リファレンス: Logger インスタンス | Mastra Observability ドキュメント](https://mastra.ai/ja/docs/reference/observability/logger): 様々な重大度レベルでイベントを記録するメソッドを提供する Logger インスタンスのドキュメント。
- [リファレンス: OtelConfig | Mastra Observability Docs](https://mastra.ai/ja/docs/reference/observability/otel-config): OpenTelemetry の計装、トレース、およびエクスポートの動作を設定する OtelConfig オブジェクトのドキュメント。
- [リファレンス: Braintrust | Observability | Mastra ドキュメント](https://mastra.ai/ja/docs/reference/observability/providers/braintrust): LLMアプリケーションの評価と監視プラットフォームであるMastraとBraintrustを統合するためのドキュメント。
- [リファレンス: Dash0 統合 | Mastra オブザーバビリティ ドキュメント](https://mastra.ai/ja/docs/reference/observability/providers/dash0): MastraとDash0、Open Telementryネイティブのオブザーバビリティソリューションとの統合に関するドキュメント。
- [リファレンス: プロバイダーリスト | オブザーバビリティ | Mastra ドキュメント](https://mastra.ai/ja/docs/reference/observability/providers): Mastra がサポートするオブザーバビリティプロバイダーの概要。Dash0、SigNoz、Braintrust、Langfuse などを含む。
- [リファレンス: Laminar 統合 | Mastra 観測性ドキュメント](https://mastra.ai/ja/docs/reference/observability/providers/laminar): LLMアプリケーション向けの専門的な観測性プラットフォームであるMastraとLaminarを統合するためのドキュメント。
- [リファレンス: Langfuse 統合 | Mastra オブザーバビリティ ドキュメント](https://mastra.ai/ja/docs/reference/observability/providers/langfuse): LLM アプリケーション向けのオープンソースオブザーバビリティプラットフォームである Mastra と Langfuse を統合するためのドキュメント。
- [リファレンス: LangSmith 統合 | Mastra 観測性ドキュメント](https://mastra.ai/ja/docs/reference/observability/providers/langsmith): LLMアプリケーションのデバッグ、テスト、評価、監視のためのプラットフォームであるMastraとLangSmithを統合するためのドキュメント。
- [リファレンス: LangWatch 統合 | Mastra オブザーバビリティ ドキュメント](https://mastra.ai/ja/docs/reference/observability/providers/langwatch): LLM アプリケーション向けの専門的なオブザーバビリティ プラットフォームである Mastra との LangWatch 統合のためのドキュメント。
- [リファレンス: New Relic 統合 | Mastra オブザーバビリティ ドキュメント](https://mastra.ai/ja/docs/reference/observability/providers/new-relic): New Relic と Mastra の統合に関するドキュメント。Mastra は、OpenTelemetry をサポートするフルスタック監視のための包括的なオブザーバビリティ プラットフォームです。
- [リファレンス: SigNoz 統合 | Mastra オブザーバビリティ ドキュメント](https://mastra.ai/ja/docs/reference/observability/providers/signoz): OpenTelemetry を通じてフルスタック監視を提供するオープンソースの APM およびオブザーバビリティ プラットフォームである Mastra と SigNoz を統合するためのドキュメント。
- [リファレンス: Traceloop 統合 | Mastra 観測性ドキュメント](https://mastra.ai/ja/docs/reference/observability/providers/traceloop): LLM アプリケーション向けの OpenTelemetry ネイティブ観測性プラットフォームである Mastra と Traceloop を統合するためのドキュメント。
- [リファレンス: Astra Vector Store | ベクターデータベース | RAG | Mastra ドキュメント](https://mastra.ai/ja/docs/reference/rag/astra): DataStax Astra DBを使用したベクター検索を提供するMastraのAstraVectorクラスのドキュメント。
- [リファレンス: Chroma Vector Store | ベクターデータベース | RAG | Mastra ドキュメント](https://mastra.ai/ja/docs/reference/rag/chroma): MastraのChromaVectorクラスのドキュメントで、ChromaDBを使用したベクター検索を提供します。
- [リファレンス: .chunk() | ドキュメント処理 | RAG | Mastra ドキュメント](https://mastra.ai/ja/docs/reference/rag/chunk): Mastraのchunk関数のドキュメントで、さまざまな戦略を使用してドキュメントを小さなセグメントに分割します。
- [リファレンス: MDocument | ドキュメント処理 | RAG | Mastra ドキュメント](https://mastra.ai/ja/docs/reference/rag/document): ドキュメント処理とチャンク化を扱うMastraのMDocumentクラスのドキュメント。
- [リファレンス: embed() | ドキュメント埋め込み | RAG | Mastra ドキュメント](https://mastra.ai/ja/docs/reference/rag/embeddings): MastraでAI SDKを使用した埋め込み機能のドキュメント。
- [リファレンス: ExtractParams | ドキュメント処理 | RAG | Mastra ドキュメント](https://mastra.ai/ja/docs/reference/rag/extract-params): Mastraにおけるメタデータ抽出設定のドキュメント。
- [リファレンス: GraphRAG | グラフベースのRAG | RAG | Mastra ドキュメント](https://mastra.ai/ja/docs/reference/rag/graph-rag): MastraのGraphRAGクラスのドキュメントで、取得拡張生成にグラフベースのアプローチを実装しています。
- [デフォルトベクターストア | ベクターデータベース | RAG | Mastra ドキュメント](https://mastra.ai/ja/docs/reference/rag/libsql): LibSQLのベクター拡張を使用してベクター検索を提供するMastraのLibSQLVectorクラスのドキュメント。
- [リファレンス: メタデータフィルター | メタデータフィルタリング | RAG | Mastra ドキュメント](https://mastra.ai/ja/docs/reference/rag/metadata-filters): Mastraにおけるメタデータフィルタリング機能のドキュメントで、異なるベクトルストアにわたるベクトル検索結果の正確なクエリを可能にします。
- [リファレンス: PG Vector Store | ベクターデータベース | RAG | Mastra ドキュメント](https://mastra.ai/ja/docs/reference/rag/pg): PostgreSQLのpgvector拡張機能を使用してベクター検索を提供するMastraのPgVectorクラスのドキュメント。
- [リファレンス: Pinecone Vector Store | Vector DBs | RAG | Mastra ドキュメント](https://mastra.ai/ja/docs/reference/rag/pinecone): MastraのPineconeVectorクラスのドキュメントで、Pineconeのベクターデータベースへのインターフェースを提供します。
- [リファレンス: Qdrant ベクターストア | ベクターデータベース | RAG | Mastra ドキュメント](https://mastra.ai/ja/docs/reference/rag/qdrant): ベクターとペイロードを管理するためのベクター類似検索エンジンであるQdrantをMastraと統合するためのドキュメント。
- [リファレンス: Rerank | ドキュメント検索 | RAG | Mastra ドキュメント](https://mastra.ai/ja/docs/reference/rag/rerank): Mastraのrerank関数のドキュメントで、ベクター検索結果の高度な再ランキング機能を提供します。
- [リファレンス: Turbopuffer ベクターストア | ベクターデータベース | RAG | Mastra ドキュメント](https://mastra.ai/ja/docs/reference/rag/turbopuffer): TurbopufferをMastraと統合するためのドキュメント。効率的な類似検索のための高性能ベクターデータベース。
- [リファレンス: Upstash Vector Store | ベクターデータベース | RAG | Mastra ドキュメント](https://mastra.ai/ja/docs/reference/rag/upstash): MastraのUpstashVectorクラスのドキュメントで、Upstash Vectorを使用したベクター検索を提供します。
- [リファレンス: Cloudflare Vector Store | ベクターデータベース | RAG | Mastra ドキュメント](https://mastra.ai/ja/docs/reference/rag/vectorize): MastraのCloudflareVectorクラスのドキュメントで、Cloudflare Vectorizeを使用したベクター検索を提供します。
- [LibSQL ストレージ | ストレージシステム | Mastra Core](https://mastra.ai/ja/docs/reference/storage/libsql): MastraにおけるLibSQLストレージ実装のドキュメント。
- [PostgreSQL ストレージ | ストレージシステム | Mastra Core](https://mastra.ai/ja/docs/reference/storage/postgresql): MastraにおけるPostgreSQLストレージ実装のドキュメント。
- [Upstash Storage | ストレージシステム | Mastra Core](https://mastra.ai/ja/docs/reference/storage/upstash): MastraにおけるUpstashストレージ実装のドキュメント。
- [リファレンス: MastraMCPClient | ツールディスカバリー | Mastra ドキュメント](https://mastra.ai/ja/docs/reference/tools/client): MastraMCPClient の API リファレンス - モデルコンテキストプロトコルのクライアント実装。
- [リファレンス: createDocumentChunkerTool() | ツール | Mastra ドキュメント](https://mastra.ai/ja/docs/reference/tools/document-chunker-tool): Mastraのドキュメントチャンクツールのドキュメントで、効率的な処理と取得のためにドキュメントを小さなチャンクに分割します。
- [リファレンス: createGraphRAGTool() | RAG | Mastra Tools ドキュメント](https://mastra.ai/ja/docs/reference/tools/graph-rag-tool): MastraのGraph RAG Toolのドキュメント。これは、ドキュメント間のセマンティック関係のグラフを構築することでRAGを強化します。
- [リファレンス: MCPConfiguration | ツール管理 | Mastra ドキュメント](https://mastra.ai/ja/docs/reference/tools/mcp-configuration): MCPConfiguration の API リファレンス - 複数の Model Context Protocol サーバーとそのツールを管理するためのクラス。
- [リファレンス: createVectorQueryTool() | RAG | Mastra Tools ドキュメント](https://mastra.ai/ja/docs/reference/tools/vector-query-tool): ベクトルストア上でのフィルタリングと再ランキング機能を備えたセマンティック検索を可能にする、Mastraのベクトルクエリツールのドキュメント。
- [リファレンス: CompositeVoice | Voice Providers | Mastra Docs](https://mastra.ai/ja/docs/reference/voice/composite-voice): CompositeVoiceクラスのドキュメント。複数の音声プロバイダーを組み合わせて、柔軟なテキスト読み上げと音声認識操作を可能にします。
- [リファレンス: Deepgram Voice | 音声プロバイダー | Mastra ドキュメント](https://mastra.ai/ja/docs/reference/voice/deepgram): Deepgram 音声実装のドキュメントで、複数の音声モデルと言語を使用したテキスト読み上げおよび音声認識機能を提供します。
- [リファレンス: ElevenLabs Voice | 音声プロバイダー | Mastra ドキュメント](https://mastra.ai/ja/docs/reference/voice/elevenlabs): 複数の音声モデルと自然な音声合成を備えた高品質なテキスト読み上げ機能を提供するElevenLabs音声実装のドキュメント。
- [リファレンス: Google Voice | Voice Providers | Mastra Docs](https://mastra.ai/ja/docs/reference/voice/google): Google Voice の実装に関するドキュメントで、テキスト読み上げと音声認識機能を提供します。
- [リファレンス: MastraVoice | ボイスプロバイダー | Mastra ドキュメント](https://mastra.ai/ja/docs/reference/voice/mastra-voice): Mastra のすべての音声サービスのコアインターフェースを定義する MastraVoice 抽象基底クラスのドキュメント。スピーチ・トゥ・スピーチ機能を含む。
- [リファレンス: Murf Voice | Voice Providers | Mastra Docs](https://mastra.ai/ja/docs/reference/voice/murf): Murf音声実装のドキュメントで、テキストから音声への機能を提供します。
- [リファレンス: OpenAI Realtime Voice | Voice Providers | Mastra Docs](https://mastra.ai/ja/docs/reference/voice/openai-realtime): OpenAIRealtimeVoiceクラスのドキュメントで、WebSocketsを介したリアルタイムのテキスト読み上げと音声認識機能を提供します。
- [リファレンス: OpenAI Voice | 音声プロバイダー | Mastra ドキュメント](https://mastra.ai/ja/docs/reference/voice/openai): OpenAIVoice クラスのドキュメントで、テキストから音声への変換と音声からテキストへの変換機能を提供します。
- [リファレンス: PlayAI Voice | Voice Providers | Mastra Docs](https://mastra.ai/ja/docs/reference/voice/playai): PlayAIの音声実装に関するドキュメントで、テキスト読み上げ機能を提供します。
- [リファレンス: Sarvam Voice | Voice Providers | Mastra Docs](https://mastra.ai/ja/docs/reference/voice/sarvam): Sarvamクラスのドキュメントで、テキストから音声への変換と音声からテキストへの変換機能を提供します。
- [リファレンス: Speechify Voice | Voice Providers | Mastra Docs](https://mastra.ai/ja/docs/reference/voice/speechify): Speechify音声実装のドキュメントで、テキスト読み上げ機能を提供します。
- [リファレンス: voice.answer() | Voice Providers | Mastra Docs](https://mastra.ai/ja/docs/reference/voice/voice.answer): リアルタイム音声プロバイダーで利用可能なanswer()メソッドのドキュメントで、音声プロバイダーに応答を生成させるトリガーです。
- [リファレンス: voice.connect() | Voice Providers | Mastra Docs](https://mastra.ai/ja/docs/reference/voice/voice.connect): リアルタイム音声プロバイダーで利用可能なconnect()メソッドのドキュメントで、音声間通信の接続を確立します。
- [リファレンス: voice.listen() | Voice Providers | Mastra Docs](https://mastra.ai/ja/docs/reference/voice/voice.listen): すべてのMastra音声プロバイダーで利用可能なlisten()メソッドのドキュメントで、音声をテキストに変換します。
- [リファレンス: voice.on() | Voice Providers | Mastra Docs](https://mastra.ai/ja/docs/reference/voice/voice.on): 音声プロバイダーで利用可能な on() メソッドのドキュメントで、音声イベントのイベントリスナーを登録します。
- [リファレンス: voice.send() | Voice Providers | Mastra Docs](https://mastra.ai/ja/docs/reference/voice/voice.send): リアルタイム音声プロバイダーで利用可能なsend()メソッドのドキュメントで、音声データをストリーミングして継続的に処理します。
- [リファレンス: voice.speak() | Voice Providers | Mastra Docs](https://mastra.ai/ja/docs/reference/voice/voice.speak): すべてのMastra音声プロバイダーで利用可能なspeak()メソッドのドキュメントで、テキストを音声に変換します。
- [リファレンス: .after() | ワークフローの構築 | Mastra ドキュメント](https://mastra.ai/ja/docs/reference/workflows/after): ワークフローにおける `after()` メソッドのドキュメントで、分岐と統合のパスを可能にします。
- [.afterEvent() メソッド | Mastra ドキュメント](https://mastra.ai/ja/docs/reference/workflows/afterEvent): イベントベースのサスペンションポイントを作成する Mastra ワークフローの afterEvent メソッドのリファレンス。
- [リファレンス: Workflow.commit() | ワークフローの実行 | Mastra ドキュメント](https://mastra.ai/ja/docs/reference/workflows/commit): ワークフロー内の `.commit()` メソッドに関するドキュメントで、現在のステップ構成でワークフローマシンを再初期化します。
- [リファレンス: Workflow.createRun() | ワークフローの実行 | Mastra ドキュメント](https://mastra.ai/ja/docs/reference/workflows/createRun): ワークフロー内の `.createRun()` メソッドのドキュメントで、新しいワークフロー実行インスタンスを初期化します。
- [リファレンス: Workflow.else() | 条件分岐 | Mastra ドキュメント](https://mastra.ai/ja/docs/reference/workflows/else): Mastra ワークフローにおける `.else()` メソッドのドキュメントで、if 条件が偽の場合に代替の分岐を作成します。
- [イベント駆動型ワークフロー | Mastra ドキュメント](https://mastra.ai/ja/docs/reference/workflows/events): MastraでafterEventメソッドとresumeWithEventメソッドを使用してイベント駆動型ワークフローを作成する方法を学びます。
- [リファレンス: Workflow.execute() | ワークフロー | Mastra ドキュメント](https://mastra.ai/ja/docs/reference/workflows/execute): Mastra ワークフローの `.execute()` メソッドに関するドキュメントで、ワークフローステップを実行し、結果を返します。
- [リファレンス: Workflow.if() | 条件分岐 | Mastra ドキュメント](https://mastra.ai/ja/docs/reference/workflows/if): Mastra ワークフローにおける `.if()` メソッドのドキュメントで、指定された条件に基づいて条件分岐を作成します。
- [リファレンス: run.resume() | ワークフローの実行 | Mastra ドキュメント](https://mastra.ai/ja/docs/reference/workflows/resume): ワークフロー内の `.resume()` メソッドに関するドキュメントで、一時停止されたワークフローステップの実行を再開します。
- [.resumeWithEvent() メソッド | Mastra ドキュメント](https://mastra.ai/ja/docs/reference/workflows/resumeWithEvent): イベントデータを使用して中断されたワークフローを再開する resumeWithEvent メソッドのリファレンス。
- [リファレンス: スナップショット | ワークフロー状態の永続化 | Mastra ドキュメント](https://mastra.ai/ja/docs/reference/workflows/snapshots): Mastraにおけるスナップショットに関する技術的リファレンス - 一時停止と再開機能を可能にするシリアライズされたワークフロー状態
- [リファレンス: start() | ワークフローの実行 | Mastra ドキュメント](https://mastra.ai/ja/docs/reference/workflows/start): ワークフロー内の `start()` メソッドに関するドキュメントで、ワークフローの実行を開始します。
- [リファレンス: ステップ | ワークフローの構築 | Mastra ドキュメント](https://mastra.ai/ja/docs/reference/workflows/step-class): ワークフロー内の個々の作業単位を定義するStepクラスのドキュメント。
- [リファレンス: StepCondition | ワークフローの構築 | Mastra](https://mastra.ai/ja/docs/reference/workflows/step-condition): ワークフロー内のステップ条件クラスのドキュメントで、前のステップの出力やトリガーデータに基づいてステップを実行するかどうかを決定します。
- [リファレンス: Workflow.step() | ワークフロー | Mastra ドキュメント](https://mastra.ai/ja/docs/reference/workflows/step-function): ワークフロー内の `.step()` メソッドに関するドキュメントで、ワークフローに新しいステップを追加します。
- [リファレンス: StepOptions | ワークフローの構築 | Mastra ドキュメント](https://mastra.ai/ja/docs/reference/workflows/step-options): ワークフロー内のステップオプションに関するドキュメントで、変数マッピング、実行条件、その他のランタイム動作を制御します。
- [ステップのリトライ | エラーハンドリング | Mastra ドキュメント](https://mastra.ai/ja/docs/reference/workflows/step-retries): 設定可能なリトライポリシーで、Mastra ワークフロー内の失敗したステップを自動的にリトライします。
- [リファレンス: suspend() | 制御フロー | Mastra ドキュメント](https://mastra.ai/ja/docs/reference/workflows/suspend): Mastra ワークフローにおける suspend 関数のドキュメントで、再開されるまで実行を一時停止します。
- [リファレンス: Workflow.then() | ワークフローの構築 | Mastra ドキュメント](https://mastra.ai/ja/docs/reference/workflows/then): ワークフロー内の `.then()` メソッドに関するドキュメントで、ステップ間の順次依存関係を作成します。
- [リファレンス: Workflow.until() | ワークフロー内のループ | Mastra ドキュメント](https://mastra.ai/ja/docs/reference/workflows/until): Mastra ワークフローにおける `.until()` メソッドのドキュメントで、指定された条件が真になるまでステップを繰り返します。
- [リファレンス: run.watch() | ワークフロー | Mastra ドキュメント](https://mastra.ai/ja/docs/reference/workflows/watch): ワークフロー内の `.watch()` メソッドに関するドキュメントで、ワークフロー実行のステータスを監視します。
- [リファレンス: Workflow.while() | ワークフロー内のループ | Mastra ドキュメント](https://mastra.ai/ja/docs/reference/workflows/while): Mastra ワークフローにおける `.while()` メソッドのドキュメントで、指定された条件が真である限りステップを繰り返します。
- [リファレンス: Workflow クラス | ワークフローの構築 | Mastra ドキュメント](https://mastra.ai/ja/docs/reference/workflows/workflow): Mastra の Workflow クラスに関するドキュメントで、条件分岐とデータ検証を伴う複雑な操作のシーケンスのための状態マシンを作成することができます。
- [Mastraのストレージ | Mastra ドキュメント](https://mastra.ai/ja/docs/storage/overview): Mastraのストレージシステムとデータ永続性機能の概要。
- [Mastraの音声 | Mastra ドキュメント](https://mastra.ai/ja/docs/voice/overview): Mastraにおける音声機能の概要。テキストから音声への変換、音声からテキストへの変換、リアルタイムの音声間のやり取りを含みます。
- [Mastraにおける音声認識 (STT) | Mastra ドキュメント](https://mastra.ai/ja/docs/voice/speech-to-text): Mastraにおける音声認識機能の概要、設定、使用法、音声プロバイダーとの統合について。
- [Mastraにおけるテキスト読み上げ (TTS) | Mastra ドキュメント](https://mastra.ai/ja/docs/voice/text-to-speech): Mastraにおけるテキスト読み上げ機能の概要、設定、使用法、音声プロバイダーとの統合を含みます。
- [Mastraにおける音声対音声機能 | Mastra ドキュメント](https://mastra.ai/ja/docs/voice/voice-to-voice): Mastraにおける音声対音声機能の概要、リアルタイムのインタラクションとイベント駆動型アーキテクチャを含む。
- [ブランチ、マージ、条件 | ワークフロー | Mastra ドキュメント](https://mastra.ai/ja/docs/workflows/control-flow): Mastra ワークフローの制御フローにより、ブランチ、マージ、条件を管理して、論理要件を満たすワークフローを構築できます。
- [動的ワークフロー | Mastra ドキュメント](https://mastra.ai/ja/docs/workflows/dynamic-workflows): 実行時の条件に基づいて柔軟なワークフローを作成できるように、ワークフローステップ内で動的ワークフローを作成する方法を学びます。
- [ワークフローにおけるエラー処理 | Mastra ドキュメント](https://mastra.ai/ja/docs/workflows/error-handling): ステップの再試行、条件分岐、モニタリングを使用して、Mastra ワークフローでエラーを処理する方法を学びます。
- [nested-workflows](https://mastra.ai/ja/docs/workflows/nested-workflows)
- [複雑なLLM操作の処理 | ワークフロー | Mastra](https://mastra.ai/ja/docs/workflows/overview): Mastraのワークフローは、分岐、並列実行、リソースの一時停止などの機能を使用して、複雑な操作のシーケンスを調整するのに役立ちます。
- [ステップの作成とワークフローへの追加 | Mastra ドキュメント](https://mastra.ai/ja/docs/workflows/steps): Mastra ワークフローのステップは、入力、出力、実行ロジックを定義することで、操作を管理するための構造化された方法を提供します。
- [ワークフローの一時停止と再開 | Human-in-the-Loop | Mastra ドキュメント](https://mastra.ai/ja/docs/workflows/suspend-and-resume): Mastra ワークフローでの一時停止と再開は、外部からの入力やリソースを待っている間に実行を一時停止することを可能にします。
- [ワークフロー変数を使用したデータマッピング | Mastra ドキュメント](https://mastra.ai/ja/docs/workflows/variables): Mastra ワークフローでステップ間のデータをマッピングし、動的なデータフローを作成する方法を学びます。
- [例: 音声機能の追加 | エージェント | Mastra](https://mastra.ai/ja/examples/agents/adding-voice-capabilities): Mastraエージェントに音声機能を追加し、さまざまな音声プロバイダーを使用して話したり聞いたりできるようにする例。
- [例: エージェンティックワークフローの呼び出し | エージェント | Mastra ドキュメント](https://mastra.ai/ja/examples/agents/agentic-workflows): MastraでのAIワークフロー作成の例、LLMを活用した計画と外部APIの統合を示します。
- [例: 鳥の分類 | エージェント | Mastra ドキュメント](https://mastra.ai/ja/examples/agents/bird-checker): Unsplashの画像が鳥を描いているかどうかを判断するためにMastra AIエージェントを使用する例。
- [例: 階層型マルチエージェントシステム | エージェント | Mastra](https://mastra.ai/ja/examples/agents/hierarchical-multi-agent): Mastraを使用して階層型マルチエージェントシステムを作成する例で、エージェントがツール機能を通じて相互作用します。
- [例: マルチエージェントワークフロー | エージェント | Mastra ドキュメント](https://mastra.ai/ja/examples/agents/multi-agent-workflow): Mastraでのエージェントワークフローの例。複数のエージェント間で作業成果物が渡されます。
- [例: システムプロンプトを使用したエージェント | エージェント | Mastra ドキュメント](https://mastra.ai/ja/examples/agents/system-prompt): システムプロンプトを使用して、その性格と能力を定義するAIエージェントをMastraで作成する例。
- [例: エージェントにツールを与える | エージェント | Mastra ドキュメント](https://mastra.ai/ja/examples/agents/using-a-tool): Mastraで専用のツールを使用して天気情報を提供するAIエージェントを作成する例。
- [例: 回答の関連性 | Evals | Mastra Docs](https://mastra.ai/ja/examples/evals/answer-relevancy): 回答の関連性メトリックを使用してクエリへの応答の関連性を評価する例。
- [例: バイアス | Evals | Mastra Docs](https://mastra.ai/ja/examples/evals/bias): バイアスの指標を使用して、さまざまな形態のバイアスに対する応答を評価する例。
- [例: 完全性 | Evals | Mastra Docs](https://mastra.ai/ja/examples/evals/completeness): 応答が入力要素をどれだけ徹底的にカバーしているかを評価するための完全性メトリックの使用例。
- [例: コンテンツ類似性 | Evals | Mastra Docs](https://mastra.ai/ja/examples/evals/content-similarity): コンテンツ間のテキスト類似性を評価するためにコンテンツ類似性メトリックを使用する例。
- [例: コンテキスト位置 | Evals | Mastra Docs](https://mastra.ai/ja/examples/evals/context-position): コンテキスト位置メトリックを使用して、応答の順序を評価する例。
- [例: コンテキスト精度 | Evals | Mastra Docs](https://mastra.ai/ja/examples/evals/context-precision): コンテキスト情報がどの程度正確に使用されているかを評価するためのコンテキスト精度メトリックの使用例。
- [例: コンテキストの関連性 | Evals | Mastra Docs](https://mastra.ai/ja/examples/evals/context-relevancy): クエリに対するコンテキスト情報の関連性を評価するためのコンテキスト関連性メトリックの使用例。
- [例: 文脈的リコール | Evals | Mastra Docs](https://mastra.ai/ja/examples/evals/contextual-recall): 文脈的リコール指標を使用して、応答がどの程度文脈情報を取り入れているかを評価する例。
- [例: カスタム評価 | Evals | Mastra ドキュメント](https://mastra.ai/ja/examples/evals/custom-eval): MastraでカスタムLLMベースの評価指標を作成する例。
- [例: 忠実性 | Evals | Mastra Docs](https://mastra.ai/ja/examples/evals/faithfulness): 忠実性メトリックを使用して、応答がコンテキストと比較してどれほど事実に基づいているかを評価する例。
- [例: 幻覚 | Evals | Mastra Docs](https://mastra.ai/ja/examples/evals/hallucination): 応答における事実の矛盾を評価するために幻覚メトリックを使用する例。
- [例: キーワードカバレッジ | Evals | Mastra Docs](https://mastra.ai/ja/examples/evals/keyword-coverage): キーワードカバレッジ指標を使用して、応答が入力テキストの重要なキーワードをどれだけカバーしているかを評価する例。
- [例: プロンプト整合性 | Evals | Mastra Docs](https://mastra.ai/ja/examples/evals/prompt-alignment): 応答における指示の遵守を評価するためのプロンプト整合性メトリックの使用例。
- [例: 要約 | Evals | Mastra Docs](https://mastra.ai/ja/examples/evals/summarization): LLMが生成した要約が内容をどれだけうまく捉え、事実の正確性を維持しているかを評価するための要約メトリックの使用例。
- [例: テキストの違い | Evals | Mastra Docs](https://mastra.ai/ja/examples/evals/textual-difference): テキストの違いメトリックを使用して、シーケンスの違いと変化を分析することによってテキスト文字列間の類似性を評価する例。
- [例: トーンの一貫性 | Evals | Mastra Docs](https://mastra.ai/ja/examples/evals/tone-consistency): テキストの感情的なトーンパターンと感情の一貫性を評価するためのトーンの一貫性メトリックの使用例。
- [例: 有害性 | Evals | Mastra Docs](https://mastra.ai/ja/examples/evals/toxicity): 有害なコンテンツや毒性のある言語に対する応答を評価するために、有害性メトリックを使用する例。
- [例: 単語の含有 | Evals | Mastra Docs](https://mastra.ai/ja/examples/evals/word-inclusion): 出力テキストにおける単語の含有を評価するためのカスタムメトリックを作成する例。
- [例一覧: ワークフロー、エージェント、RAG | Mastra ドキュメント](https://mastra.ai/ja/examples): Mastraを使用したAI開発の実用例を探求し、テキスト生成、RAG実装、構造化出力、マルチモーダルインタラクションを含みます。OpenAI、Anthropic、Google Geminiを使用してAIアプリケーションを構築する方法を学びましょう。
- [メモリープロセッサー](https://mastra.ai/ja/examples/memory/memory-processors): 呼び出されたメッセージをフィルターおよび変換するためのメモリープロセッサーの使用例
- [memory-with-libsql](https://mastra.ai/ja/examples/memory/memory-with-libsql)
- [memory-with-pg](https://mastra.ai/ja/examples/memory/memory-with-pg)
- [memory-with-upstash](https://mastra.ai/ja/examples/memory/memory-with-upstash)
- [ストリーミング作業記憶（上級）](https://mastra.ai/ja/examples/memory/streaming-working-memory-advanced): 会話を通じてToDoリストを維持するための作業記憶の使用例
- [ストリーミング作業メモリ](https://mastra.ai/ja/examples/memory/streaming-working-memory): エージェントで作業メモリを使用する例
- [例: チャンク区切りの調整 | RAG | Mastra ドキュメント](https://mastra.ai/ja/examples/rag/chunking/adjust-chunk-delimiters): Mastraでチャンク区切りを調整して、コンテンツ構造により適合させます。
- [例: チャンクサイズの調整 | RAG | Mastra ドキュメント](https://mastra.ai/ja/examples/rag/chunking/adjust-chunk-size): Mastraでチャンクサイズを調整し、コンテンツとメモリ要件により適合させます。
- [例: HTMLの意味的チャンク化 | RAG | Mastra ドキュメント](https://mastra.ai/ja/examples/rag/chunking/chunk-html): MastraでHTMLコンテンツをチャンク化し、文書を意味的にチャンク化します。
- [例: JSONの意味的チャンク化 | RAG | Mastra ドキュメント](https://mastra.ai/ja/examples/rag/chunking/chunk-json): MastraでJSONデータをチャンクして、ドキュメントを意味的にチャンク化します。
- [例: セマンティックにMarkdownをチャンク化 | RAG | Mastra Docs](https://mastra.ai/ja/examples/rag/chunking/chunk-markdown): 検索または取得の目的でMarkdownドキュメントをチャンク化するためのMastraの使用例。
- [例: 意味的にテキストを分割する | RAG | Mastra ドキュメント](https://mastra.ai/ja/examples/rag/chunking/chunk-text): Mastraを使用して大きなテキストドキュメントを処理のために小さなチャンクに分割する例。
- [例: チャンク配列の埋め込み | RAG | Mastra ドキュメント](https://mastra.ai/ja/examples/rag/embedding/embed-chunk-array): 類似性検索のために、テキストチャンクの配列に対して埋め込みを生成するためのMastraの使用例。
- [例: テキストチャンクの埋め込み | RAG | Mastra ドキュメント](https://mastra.ai/ja/examples/rag/embedding/embed-text-chunk): 類似性検索のために単一のテキストチャンクの埋め込みを生成するためのMastraの使用例。
- [例: Cohereを使用したテキストの埋め込み | RAG | Mastra ドキュメント](https://mastra.ai/ja/examples/rag/embedding/embed-text-with-cohere): Mastraを使用してCohereの埋め込みモデルを用いて埋め込みを生成する例。
- [例: メタデータ抽出 | 検索 | RAG | Mastra ドキュメント](https://mastra.ai/ja/examples/rag/embedding/metadata-extraction): Mastraでの文書からのメタデータ抽出と利用の例を示し、文書処理と検索を強化します。
- [例: ハイブリッドベクター検索 | RAG | Mastra ドキュメント](https://mastra.ai/ja/examples/rag/query/hybrid-vector-search): Mastraでベクター検索結果を強化するためにPGVectorを使用したメタデータフィルターの例。
- [例: トップK結果の取得 | RAG | Mastra ドキュメント](https://mastra.ai/ja/examples/rag/query/retrieve-results): Mastraを使用してベクターデータベースをクエリし、意味的に類似したチャンクを取得する例。
- [例: ツールを使用した結果の再ランキング | 検索 | RAG | Mastra ドキュメント](https://mastra.ai/ja/examples/rag/rerank/rerank-rag): OpenAI の埋め込みと PGVector を使用したベクトルストレージで、Mastra における RAG システムの再ランキングを実装する例。
- [例: 結果の再ランキング | 検索 | RAG | Mastra ドキュメント](https://mastra.ai/ja/examples/rag/rerank/rerank): OpenAI の埋め込みと PGVector を使用したベクトルストレージでの意味的再ランキングの実装例。
- [例: Cohereを使用したリランキング | RAG | Mastra ドキュメント](https://mastra.ai/ja/examples/rag/rerank/reranking-with-cohere): Cohereのリランキングサービスを使用して、Mastraでドキュメント検索の関連性を向上させる例。
- [例: 埋め込みのアップサート | RAG | Mastra ドキュメント](https://mastra.ai/ja/examples/rag/upsert/upsert-embeddings): 類似性検索のために、さまざまなベクターデータベースに埋め込みを保存するためのMastraの使用例。
- [例: ベクタークエリツールの使用 | RAG | Mastra ドキュメント](https://mastra.ai/ja/examples/rag/usage/basic-rag): OpenAI の埋め込みと PGVector を使用して、Mastra で基本的な RAG システムを実装する例。
- [例: 情報密度の最適化 | RAG | Mastra ドキュメント](https://mastra.ai/ja/examples/rag/usage/cleanup-rag): LLMベースの処理を使用して情報密度を最適化し、データを重複排除するためのMastraでのRAGシステムの実装例。
- [例: 思考の連鎖プロンプト | RAG | Mastra ドキュメント](https://mastra.ai/ja/examples/rag/usage/cot-rag): OpenAIとPGVectorを使用した思考の連鎖推論によるMastraでのRAGシステムの実装例。
- [例: ワークフローを用いた構造化推論 | RAG | Mastra ドキュメント](https://mastra.ai/ja/examples/rag/usage/cot-workflow-rag): Mastra のワークフロー機能を使用して RAG システムで構造化推論を実装する例。
- [例: エージェント駆動のメタデータフィルタリング | 検索 | RAG | Mastra ドキュメント](https://mastra.ai/ja/examples/rag/usage/filter-rag): RAGシステムでMastraエージェントを使用して、ドキュメント検索のためのメタデータフィルタを構築および適用する例。
- [例: 完全なグラフRAGシステム | RAG | Mastraドキュメント](https://mastra.ai/ja/examples/rag/usage/graph-rag): OpenAIの埋め込みとPGVectorを使用したベクトルストレージでのMastraにおけるグラフRAGシステムの実装例。
- [例: 音声からテキストへ | 音声 | Mastra ドキュメント](https://mastra.ai/ja/examples/voice/speech-to-text): Mastraを使用して音声からテキストへのアプリケーションを作成する例。
- [例: テキストから音声へ | ボイス | Mastra ドキュメント](https://mastra.ai/ja/examples/voice/text-to-speech): Mastraを使用してテキストから音声へのアプリケーションを作成する例。
- [例: 分岐パス | ワークフロー | Mastra ドキュメント](https://mastra.ai/ja/examples/workflows/branching-paths): 中間結果に基づいて分岐パスを持つワークフローを作成するためのMastraの使用例。
- [例: ワークフローからエージェントを呼び出す | Mastra ドキュメント](https://mastra.ai/ja/examples/workflows/calling-agent): ワークフローのステップ内からAIエージェントを呼び出すためにMastraを使用する例。
- [例: 条件分岐 (実験的) | ワークフロー | Mastra ドキュメント](https://mastra.ai/ja/examples/workflows/conditional-branching): Mastraを使用してワークフローでif/else文を使った条件分岐を作成する例。
- [例: ワークフローの作成 | ワークフロー | Mastra ドキュメント](https://mastra.ai/ja/examples/workflows/creating-a-workflow): 単一のステップで簡単なワークフローを定義し実行するためのMastraの使用例。
- [例: 循環依存関係 | ワークフロー | Mastra ドキュメント](https://mastra.ai/ja/examples/workflows/cyclical-dependencies): 循環依存関係と条件付きループを使用してワークフローを作成するためのMastraの使用例。
- [例: Human in the Loop | ワークフロー | Mastra ドキュメント](https://mastra.ai/ja/examples/workflows/human-in-the-loop): 人間の介入ポイントを持つワークフローを作成するためのMastraの使用例。
- [例: 並列実行 | ワークフロー | Mastra ドキュメント](https://mastra.ai/ja/examples/workflows/parallel-steps): ワークフロー内で複数の独立したタスクを並列に実行するためのMastraの使用例。
- [例: 順次ステップ | ワークフロー | Mastra ドキュメント](https://mastra.ai/ja/examples/workflows/sequential-steps): 特定の順序でワークフローステップを連鎖し、データをそれらの間で渡すためのMastraの使用例。
- [例: 一時停止と再開 | ワークフロー | Mastra ドキュメント](https://mastra.ai/ja/examples/workflows/suspend-and-resume): 実行中にワークフローステップを一時停止および再開するためのMastraの使用例。
- [例: ツールをステップとして使用する | ワークフロー | Mastra ドキュメント](https://mastra.ai/ja/examples/workflows/using-a-tool-as-a-step): ワークフローでカスタムツールをステップとして統合するためのMastraの使用例。
- [ワークフロー変数を使用したデータマッピング | Mastraの例](https://mastra.ai/ja/examples/workflows/workflow-variables): Mastraワークフローでステップ間のデータをマッピングするためにワークフロー変数を使用する方法を学びます。
- [ショーケース](https://mastra.ai/ja/showcase): Mastraで構築されたこれらのアプリケーションをご覧ください